# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_WaveData_FragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_WaveData_FragmentData_ActionData import clz_Torappu_LevelData_WaveData_FragmentData_ActionData
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_LevelData_WaveData_FragmentDataStart(builder):
    builder.StartObject(2)

def Start(builder):
    clz_Torappu_LevelData_WaveData_FragmentDataStart(builder)

def clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def AddPreDelay(builder, preDelay):
    clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, preDelay)

def clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def AddActions(builder, actions):
    clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions)

def clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActionsVector(builder, numElems):
    return clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, numElems)

def clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder)

import clz_Torappu_LevelData_WaveData_FragmentData_ActionData
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_WaveData_FragmentDataT(object):

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def __init__(self):
        self.preDelay = 0.0  # type: float
        self.actions = None  # type: List[clz_Torappu_LevelData_WaveData_FragmentData_ActionData.clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveDataFragmentData = clz_Torappu_LevelData_WaveData_FragmentData()
        clzTorappuLevelDataWaveDataFragmentData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveDataFragmentData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveDataFragmentData):
        x = clz_Torappu_LevelData_WaveData_FragmentDataT()
        x._UnPack(clzTorappuLevelDataWaveDataFragmentData)
        return x

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def _UnPack(self, clzTorappuLevelDataWaveDataFragmentData):
        if clzTorappuLevelDataWaveDataFragmentData is None:
            return
        self.preDelay = clzTorappuLevelDataWaveDataFragmentData.PreDelay()
        if not clzTorappuLevelDataWaveDataFragmentData.ActionsIsNone():
            self.actions = []
            for i in range(clzTorappuLevelDataWaveDataFragmentData.ActionsLength()):
                if clzTorappuLevelDataWaveDataFragmentData.Actions(i) is None:
                    self.actions.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_FragmentData_ActionData_ = clz_Torappu_LevelData_WaveData_FragmentData_ActionData.clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT.InitFromObj(clzTorappuLevelDataWaveDataFragmentData.Actions(i))
                    self.actions.append(clz_Torappu_LevelData_WaveData_FragmentData_ActionData_)

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def Pack(self, builder):
        if self.actions is not None:
            actionslist = []
            for i in range(len(self.actions)):
                actionslist.append(self.actions[i].Pack(builder))
            clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, len(self.actions))
            for i in reversed(range(len(self.actions))):
                builder.PrependUOffsetTRelative(actionslist[i])
            actions = builder.EndVector()
        clz_Torappu_LevelData_WaveData_FragmentDataStart(builder)
        clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, self.preDelay)
        if self.actions is not None:
            clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions)
        clzTorappuLevelDataWaveDataFragmentData = clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder)
        return clzTorappuLevelDataWaveDataFragmentData
