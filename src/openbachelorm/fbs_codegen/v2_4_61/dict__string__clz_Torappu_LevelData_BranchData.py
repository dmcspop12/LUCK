# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class dict__string__clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_LevelData_BranchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_LevelData_BranchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_LevelData_BranchData import clz_Torappu_LevelData_BranchData
            obj = clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(2)

def Start(builder):
    dict__string__clz_Torappu_LevelData_BranchDataStart(builder)

def dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key)

def dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value)

def dict__string__clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return dict__string__clz_Torappu_LevelData_BranchDataEnd(builder)

import clz_Torappu_LevelData_BranchData
try:
    from typing import Optional
except:
    pass

class dict__string__clz_Torappu_LevelData_BranchDataT(object):

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: Optional[clz_Torappu_LevelData_BranchData.clz_Torappu_LevelData_BranchDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dict_string_clzTorappuLevelDataBranchData = dict__string__clz_Torappu_LevelData_BranchData()
        dict_string_clzTorappuLevelDataBranchData.Init(buf, pos)
        return cls.InitFromObj(dict_string_clzTorappuLevelDataBranchData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dict_string_clzTorappuLevelDataBranchData):
        x = dict__string__clz_Torappu_LevelData_BranchDataT()
        x._UnPack(dict_string_clzTorappuLevelDataBranchData)
        return x

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def _UnPack(self, dict_string_clzTorappuLevelDataBranchData):
        if dict_string_clzTorappuLevelDataBranchData is None:
            return
        self.key = dict_string_clzTorappuLevelDataBranchData.Key()
        if dict_string_clzTorappuLevelDataBranchData.Value() is not None:
            self.value = clz_Torappu_LevelData_BranchData.clz_Torappu_LevelData_BranchDataT.InitFromObj(dict_string_clzTorappuLevelDataBranchData.Value())

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = self.value.Pack(builder)
        dict__string__clz_Torappu_LevelData_BranchDataStart(builder)
        if self.key is not None:
            dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key)
        if self.value is not None:
            dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value)
        dict_string_clzTorappuLevelDataBranchData = dict__string__clz_Torappu_LevelData_BranchDataEnd(builder)
        return dict_string_clzTorappuLevelDataBranchData
