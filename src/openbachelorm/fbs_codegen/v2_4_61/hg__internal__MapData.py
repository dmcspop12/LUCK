# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class hg__internal__MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hg__internal__MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshg__internal__MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # hg__internal__MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hg__internal__MapData
    def RowSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def ColumnSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def MatrixData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # hg__internal__MapData
    def MatrixDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # hg__internal__MapData
    def MatrixDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hg__internal__MapData
    def MatrixDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def hg__internal__MapDataStart(builder):
    builder.StartObject(3)

def Start(builder):
    hg__internal__MapDataStart(builder)

def hg__internal__MapDataAddRowSize(builder, rowSize):
    builder.PrependInt32Slot(0, rowSize, 0)

def AddRowSize(builder, rowSize):
    hg__internal__MapDataAddRowSize(builder, rowSize)

def hg__internal__MapDataAddColumnSize(builder, columnSize):
    builder.PrependInt32Slot(1, columnSize, 0)

def AddColumnSize(builder, columnSize):
    hg__internal__MapDataAddColumnSize(builder, columnSize)

def hg__internal__MapDataAddMatrixData(builder, matrixData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matrixData), 0)

def AddMatrixData(builder, matrixData):
    hg__internal__MapDataAddMatrixData(builder, matrixData)

def hg__internal__MapDataStartMatrixDataVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def StartMatrixDataVector(builder, numElems):
    return hg__internal__MapDataStartMatrixDataVector(builder, numElems)

def hg__internal__MapDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return hg__internal__MapDataEnd(builder)

try:
    from typing import List
except:
    pass

class hg__internal__MapDataT(object):

    # hg__internal__MapDataT
    def __init__(self):
        self.rowSize = 0  # type: int
        self.columnSize = 0  # type: int
        self.matrixData = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        hg_internal_mapData = hg__internal__MapData()
        hg_internal_mapData.Init(buf, pos)
        return cls.InitFromObj(hg_internal_mapData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, hg_internal_mapData):
        x = hg__internal__MapDataT()
        x._UnPack(hg_internal_mapData)
        return x

    # hg__internal__MapDataT
    def _UnPack(self, hg_internal_mapData):
        if hg_internal_mapData is None:
            return
        self.rowSize = hg_internal_mapData.RowSize()
        self.columnSize = hg_internal_mapData.ColumnSize()
        if not hg_internal_mapData.MatrixDataIsNone():
            if np is None:
                self.matrixData = []
                for i in range(hg_internal_mapData.MatrixDataLength()):
                    self.matrixData.append(hg_internal_mapData.MatrixData(i))
            else:
                self.matrixData = hg_internal_mapData.MatrixDataAsNumpy()

    # hg__internal__MapDataT
    def Pack(self, builder):
        if self.matrixData is not None:
            if np is not None and type(self.matrixData) is np.ndarray:
                matrixData = builder.CreateNumpyVector(self.matrixData)
            else:
                hg__internal__MapDataStartMatrixDataVector(builder, len(self.matrixData))
                for i in reversed(range(len(self.matrixData))):
                    builder.PrependInt16(self.matrixData[i])
                matrixData = builder.EndVector()
        hg__internal__MapDataStart(builder)
        hg__internal__MapDataAddRowSize(builder, self.rowSize)
        hg__internal__MapDataAddColumnSize(builder, self.columnSize)
        if self.matrixData is not None:
            hg__internal__MapDataAddMatrixData(builder, matrixData)
        hg_internal_mapData = hg__internal__MapDataEnd(builder)
        return hg_internal_mapData
