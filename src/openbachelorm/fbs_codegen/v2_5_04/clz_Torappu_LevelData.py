# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_LevelData_Options import clz_Torappu_LevelData_Options
            obj = clz_Torappu_LevelData_Options()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def BgmEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def EnvironmentSe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_MapData import clz_Torappu_MapData
            obj = clz_Torappu_MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def TilesDisallowToLocateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LegacyInLevelRuneData import clz_Torappu_LegacyInLevelRuneData
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_LevelData
    def OptionalRunes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from dict__string__list_clz_Torappu_LegacyInLevelRuneData import dict__string__list_clz_Torappu_LegacyInLevelRuneData
            obj = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def OptionalRunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def OptionalRunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_LevelData
    def GlobalBuffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_GlobalBuffData import clz_Torappu_LevelData_GlobalBuffData
            obj = clz_Torappu_LevelData_GlobalBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def GlobalBuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def GlobalBuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_LevelData
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_RouteData import clz_Torappu_RouteData
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_LevelData
    def ExtraRoutes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_RouteData import clz_Torappu_RouteData
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExtraRoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExtraRoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_LevelData
    def Enemies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_EnemyData import clz_Torappu_LevelData_EnemyData
            obj = clz_Torappu_LevelData_EnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_LevelData
    def EnemyDbRefs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_EnemyDataDbReference import clz_Torappu_LevelData_EnemyDataDbReference
            obj = clz_Torappu_LevelData_EnemyDataDbReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemyDbRefsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemyDbRefsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_LevelData
    def Waves(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_WaveData import clz_Torappu_LevelData_WaveData
            obj = clz_Torappu_LevelData_WaveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def WavesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def WavesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData
    def Branches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from dict__string__clz_Torappu_LevelData_BranchData import dict__string__clz_Torappu_LevelData_BranchData
            obj = dict__string__clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def BranchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def BranchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_LevelData
    def Predefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_LevelData_PredefinedData import clz_Torappu_LevelData_PredefinedData
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def HardPredefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_LevelData_PredefinedData import clz_Torappu_LevelData_PredefinedData
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExcludeCharIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData
    def ExcludeCharIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExcludeCharIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_LevelData
    def RandomSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData
    def OperaConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def CameraPlugin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_LevelDataStart(builder):
    builder.StartObject(22)

def Start(builder):
    clz_Torappu_LevelDataStart(builder)

def clz_Torappu_LevelDataAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def AddOptions(builder, options):
    clz_Torappu_LevelDataAddOptions(builder, options)

def clz_Torappu_LevelDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def AddLevelId(builder, levelId):
    clz_Torappu_LevelDataAddLevelId(builder, levelId)

def clz_Torappu_LevelDataAddMapId(builder, mapId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapId), 0)

def AddMapId(builder, mapId):
    clz_Torappu_LevelDataAddMapId(builder, mapId)

def clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bgmEvent), 0)

def AddBgmEvent(builder, bgmEvent):
    clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent)

def clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(environmentSe), 0)

def AddEnvironmentSe(builder, environmentSe):
    clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe)

def clz_Torappu_LevelDataAddMapData(builder, mapData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mapData), 0)

def AddMapData(builder, mapData):
    clz_Torappu_LevelDataAddMapData(builder, mapData)

def clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tilesDisallowToLocate), 0)

def AddTilesDisallowToLocate(builder, tilesDisallowToLocate):
    clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate)

def clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTilesDisallowToLocateVector(builder, numElems):
    return clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, numElems)

def clz_Torappu_LevelDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def AddRunes(builder, runes):
    clz_Torappu_LevelDataAddRunes(builder, runes)

def clz_Torappu_LevelDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRunesVector(builder, numElems):
    return clz_Torappu_LevelDataStartRunesVector(builder, numElems)

def clz_Torappu_LevelDataAddOptionalRunes(builder, optionalRunes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(optionalRunes), 0)

def AddOptionalRunes(builder, optionalRunes):
    clz_Torappu_LevelDataAddOptionalRunes(builder, optionalRunes)

def clz_Torappu_LevelDataStartOptionalRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOptionalRunesVector(builder, numElems):
    return clz_Torappu_LevelDataStartOptionalRunesVector(builder, numElems)

def clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(globalBuffs), 0)

def AddGlobalBuffs(builder, globalBuffs):
    clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs)

def clz_Torappu_LevelDataStartGlobalBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGlobalBuffsVector(builder, numElems):
    return clz_Torappu_LevelDataStartGlobalBuffsVector(builder, numElems)

def clz_Torappu_LevelDataAddRoutes(builder, routes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)

def AddRoutes(builder, routes):
    clz_Torappu_LevelDataAddRoutes(builder, routes)

def clz_Torappu_LevelDataStartRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRoutesVector(builder, numElems):
    return clz_Torappu_LevelDataStartRoutesVector(builder, numElems)

def clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(extraRoutes), 0)

def AddExtraRoutes(builder, extraRoutes):
    clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes)

def clz_Torappu_LevelDataStartExtraRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtraRoutesVector(builder, numElems):
    return clz_Torappu_LevelDataStartExtraRoutesVector(builder, numElems)

def clz_Torappu_LevelDataAddEnemies(builder, enemies):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemies), 0)

def AddEnemies(builder, enemies):
    clz_Torappu_LevelDataAddEnemies(builder, enemies)

def clz_Torappu_LevelDataStartEnemiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemiesVector(builder, numElems):
    return clz_Torappu_LevelDataStartEnemiesVector(builder, numElems)

def clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enemyDbRefs), 0)

def AddEnemyDbRefs(builder, enemyDbRefs):
    clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs)

def clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyDbRefsVector(builder, numElems):
    return clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, numElems)

def clz_Torappu_LevelDataAddWaves(builder, waves):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(waves), 0)

def AddWaves(builder, waves):
    clz_Torappu_LevelDataAddWaves(builder, waves)

def clz_Torappu_LevelDataStartWavesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWavesVector(builder, numElems):
    return clz_Torappu_LevelDataStartWavesVector(builder, numElems)

def clz_Torappu_LevelDataAddBranches(builder, branches):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(branches), 0)

def AddBranches(builder, branches):
    clz_Torappu_LevelDataAddBranches(builder, branches)

def clz_Torappu_LevelDataStartBranchesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBranchesVector(builder, numElems):
    return clz_Torappu_LevelDataStartBranchesVector(builder, numElems)

def clz_Torappu_LevelDataAddPredefines(builder, predefines):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(predefines), 0)

def AddPredefines(builder, predefines):
    clz_Torappu_LevelDataAddPredefines(builder, predefines)

def clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(hardPredefines), 0)

def AddHardPredefines(builder, hardPredefines):
    clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines)

def clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(excludeCharIdList), 0)

def AddExcludeCharIdList(builder, excludeCharIdList):
    clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList)

def clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExcludeCharIdListVector(builder, numElems):
    return clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, numElems)

def clz_Torappu_LevelDataAddRandomSeed(builder, randomSeed):
    builder.PrependInt32Slot(19, randomSeed, 0)

def AddRandomSeed(builder, randomSeed):
    clz_Torappu_LevelDataAddRandomSeed(builder, randomSeed)

def clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(operaConfig), 0)

def AddOperaConfig(builder, operaConfig):
    clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig)

def clz_Torappu_LevelDataAddCameraPlugin(builder, cameraPlugin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(cameraPlugin), 0)

def AddCameraPlugin(builder, cameraPlugin):
    clz_Torappu_LevelDataAddCameraPlugin(builder, cameraPlugin)

def clz_Torappu_LevelDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelDataEnd(builder)

import clz_Torappu_GridPosition
import clz_Torappu_LegacyInLevelRuneData
import clz_Torappu_LevelData_EnemyData
import clz_Torappu_LevelData_EnemyDataDbReference
import clz_Torappu_LevelData_GlobalBuffData
import clz_Torappu_LevelData_Options
import clz_Torappu_LevelData_PredefinedData
import clz_Torappu_LevelData_WaveData
import clz_Torappu_MapData
import clz_Torappu_RouteData
import dict__string__clz_Torappu_LevelData_BranchData
import dict__string__list_clz_Torappu_LegacyInLevelRuneData
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelDataT(object):

    # clz_Torappu_LevelDataT
    def __init__(self):
        self.options = None  # type: Optional[clz_Torappu_LevelData_Options.clz_Torappu_LevelData_OptionsT]
        self.levelId = None  # type: str
        self.mapId = None  # type: str
        self.bgmEvent = None  # type: str
        self.environmentSe = None  # type: str
        self.mapData = None  # type: Optional[clz_Torappu_MapData.clz_Torappu_MapDataT]
        self.tilesDisallowToLocate = None  # type: List[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.runes = None  # type: List[clz_Torappu_LegacyInLevelRuneData.clz_Torappu_LegacyInLevelRuneDataT]
        self.optionalRunes = None  # type: List[dict__string__list_clz_Torappu_LegacyInLevelRuneData.dict__string__list_clz_Torappu_LegacyInLevelRuneDataT]
        self.globalBuffs = None  # type: List[clz_Torappu_LevelData_GlobalBuffData.clz_Torappu_LevelData_GlobalBuffDataT]
        self.routes = None  # type: List[clz_Torappu_RouteData.clz_Torappu_RouteDataT]
        self.extraRoutes = None  # type: List[clz_Torappu_RouteData.clz_Torappu_RouteDataT]
        self.enemies = None  # type: List[clz_Torappu_LevelData_EnemyData.clz_Torappu_LevelData_EnemyDataT]
        self.enemyDbRefs = None  # type: List[clz_Torappu_LevelData_EnemyDataDbReference.clz_Torappu_LevelData_EnemyDataDbReferenceT]
        self.waves = None  # type: List[clz_Torappu_LevelData_WaveData.clz_Torappu_LevelData_WaveDataT]
        self.branches = None  # type: List[dict__string__clz_Torappu_LevelData_BranchData.dict__string__clz_Torappu_LevelData_BranchDataT]
        self.predefines = None  # type: Optional[clz_Torappu_LevelData_PredefinedData.clz_Torappu_LevelData_PredefinedDataT]
        self.hardPredefines = None  # type: Optional[clz_Torappu_LevelData_PredefinedData.clz_Torappu_LevelData_PredefinedDataT]
        self.excludeCharIdList = None  # type: List[str]
        self.randomSeed = 0  # type: int
        self.operaConfig = None  # type: str
        self.cameraPlugin = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelData = clz_Torappu_LevelData()
        clzTorappuLevelData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelData):
        x = clz_Torappu_LevelDataT()
        x._UnPack(clzTorappuLevelData)
        return x

    # clz_Torappu_LevelDataT
    def _UnPack(self, clzTorappuLevelData):
        if clzTorappuLevelData is None:
            return
        if clzTorappuLevelData.Options() is not None:
            self.options = clz_Torappu_LevelData_Options.clz_Torappu_LevelData_OptionsT.InitFromObj(clzTorappuLevelData.Options())
        self.levelId = clzTorappuLevelData.LevelId()
        self.mapId = clzTorappuLevelData.MapId()
        self.bgmEvent = clzTorappuLevelData.BgmEvent()
        self.environmentSe = clzTorappuLevelData.EnvironmentSe()
        if clzTorappuLevelData.MapData() is not None:
            self.mapData = clz_Torappu_MapData.clz_Torappu_MapDataT.InitFromObj(clzTorappuLevelData.MapData())
        if not clzTorappuLevelData.TilesDisallowToLocateIsNone():
            self.tilesDisallowToLocate = []
            for i in range(clzTorappuLevelData.TilesDisallowToLocateLength()):
                if clzTorappuLevelData.TilesDisallowToLocate(i) is None:
                    self.tilesDisallowToLocate.append(None)
                else:
                    clz_Torappu_GridPosition_ = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuLevelData.TilesDisallowToLocate(i))
                    self.tilesDisallowToLocate.append(clz_Torappu_GridPosition_)
        if not clzTorappuLevelData.RunesIsNone():
            self.runes = []
            for i in range(clzTorappuLevelData.RunesLength()):
                if clzTorappuLevelData.Runes(i) is None:
                    self.runes.append(None)
                else:
                    clz_Torappu_LegacyInLevelRuneData_ = clz_Torappu_LegacyInLevelRuneData.clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(clzTorappuLevelData.Runes(i))
                    self.runes.append(clz_Torappu_LegacyInLevelRuneData_)
        if not clzTorappuLevelData.OptionalRunesIsNone():
            self.optionalRunes = []
            for i in range(clzTorappuLevelData.OptionalRunesLength()):
                if clzTorappuLevelData.OptionalRunes(i) is None:
                    self.optionalRunes.append(None)
                else:
                    dict__string__list_clz_Torappu_LegacyInLevelRuneData_ = dict__string__list_clz_Torappu_LegacyInLevelRuneData.dict__string__list_clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(clzTorappuLevelData.OptionalRunes(i))
                    self.optionalRunes.append(dict__string__list_clz_Torappu_LegacyInLevelRuneData_)
        if not clzTorappuLevelData.GlobalBuffsIsNone():
            self.globalBuffs = []
            for i in range(clzTorappuLevelData.GlobalBuffsLength()):
                if clzTorappuLevelData.GlobalBuffs(i) is None:
                    self.globalBuffs.append(None)
                else:
                    clz_Torappu_LevelData_GlobalBuffData_ = clz_Torappu_LevelData_GlobalBuffData.clz_Torappu_LevelData_GlobalBuffDataT.InitFromObj(clzTorappuLevelData.GlobalBuffs(i))
                    self.globalBuffs.append(clz_Torappu_LevelData_GlobalBuffData_)
        if not clzTorappuLevelData.RoutesIsNone():
            self.routes = []
            for i in range(clzTorappuLevelData.RoutesLength()):
                if clzTorappuLevelData.Routes(i) is None:
                    self.routes.append(None)
                else:
                    clz_Torappu_RouteData_ = clz_Torappu_RouteData.clz_Torappu_RouteDataT.InitFromObj(clzTorappuLevelData.Routes(i))
                    self.routes.append(clz_Torappu_RouteData_)
        if not clzTorappuLevelData.ExtraRoutesIsNone():
            self.extraRoutes = []
            for i in range(clzTorappuLevelData.ExtraRoutesLength()):
                if clzTorappuLevelData.ExtraRoutes(i) is None:
                    self.extraRoutes.append(None)
                else:
                    clz_Torappu_RouteData_ = clz_Torappu_RouteData.clz_Torappu_RouteDataT.InitFromObj(clzTorappuLevelData.ExtraRoutes(i))
                    self.extraRoutes.append(clz_Torappu_RouteData_)
        if not clzTorappuLevelData.EnemiesIsNone():
            self.enemies = []
            for i in range(clzTorappuLevelData.EnemiesLength()):
                if clzTorappuLevelData.Enemies(i) is None:
                    self.enemies.append(None)
                else:
                    clz_Torappu_LevelData_EnemyData_ = clz_Torappu_LevelData_EnemyData.clz_Torappu_LevelData_EnemyDataT.InitFromObj(clzTorappuLevelData.Enemies(i))
                    self.enemies.append(clz_Torappu_LevelData_EnemyData_)
        if not clzTorappuLevelData.EnemyDbRefsIsNone():
            self.enemyDbRefs = []
            for i in range(clzTorappuLevelData.EnemyDbRefsLength()):
                if clzTorappuLevelData.EnemyDbRefs(i) is None:
                    self.enemyDbRefs.append(None)
                else:
                    clz_Torappu_LevelData_EnemyDataDbReference_ = clz_Torappu_LevelData_EnemyDataDbReference.clz_Torappu_LevelData_EnemyDataDbReferenceT.InitFromObj(clzTorappuLevelData.EnemyDbRefs(i))
                    self.enemyDbRefs.append(clz_Torappu_LevelData_EnemyDataDbReference_)
        if not clzTorappuLevelData.WavesIsNone():
            self.waves = []
            for i in range(clzTorappuLevelData.WavesLength()):
                if clzTorappuLevelData.Waves(i) is None:
                    self.waves.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_ = clz_Torappu_LevelData_WaveData.clz_Torappu_LevelData_WaveDataT.InitFromObj(clzTorappuLevelData.Waves(i))
                    self.waves.append(clz_Torappu_LevelData_WaveData_)
        if not clzTorappuLevelData.BranchesIsNone():
            self.branches = []
            for i in range(clzTorappuLevelData.BranchesLength()):
                if clzTorappuLevelData.Branches(i) is None:
                    self.branches.append(None)
                else:
                    dict__string__clz_Torappu_LevelData_BranchData_ = dict__string__clz_Torappu_LevelData_BranchData.dict__string__clz_Torappu_LevelData_BranchDataT.InitFromObj(clzTorappuLevelData.Branches(i))
                    self.branches.append(dict__string__clz_Torappu_LevelData_BranchData_)
        if clzTorappuLevelData.Predefines() is not None:
            self.predefines = clz_Torappu_LevelData_PredefinedData.clz_Torappu_LevelData_PredefinedDataT.InitFromObj(clzTorappuLevelData.Predefines())
        if clzTorappuLevelData.HardPredefines() is not None:
            self.hardPredefines = clz_Torappu_LevelData_PredefinedData.clz_Torappu_LevelData_PredefinedDataT.InitFromObj(clzTorappuLevelData.HardPredefines())
        if not clzTorappuLevelData.ExcludeCharIdListIsNone():
            self.excludeCharIdList = []
            for i in range(clzTorappuLevelData.ExcludeCharIdListLength()):
                self.excludeCharIdList.append(clzTorappuLevelData.ExcludeCharIdList(i))
        self.randomSeed = clzTorappuLevelData.RandomSeed()
        self.operaConfig = clzTorappuLevelData.OperaConfig()
        self.cameraPlugin = clzTorappuLevelData.CameraPlugin()

    # clz_Torappu_LevelDataT
    def Pack(self, builder):
        if self.options is not None:
            options = self.options.Pack(builder)
        if self.levelId is not None:
            levelId = builder.CreateString(self.levelId)
        if self.mapId is not None:
            mapId = builder.CreateString(self.mapId)
        if self.bgmEvent is not None:
            bgmEvent = builder.CreateString(self.bgmEvent)
        if self.environmentSe is not None:
            environmentSe = builder.CreateString(self.environmentSe)
        if self.mapData is not None:
            mapData = self.mapData.Pack(builder)
        if self.tilesDisallowToLocate is not None:
            tilesDisallowToLocatelist = []
            for i in range(len(self.tilesDisallowToLocate)):
                tilesDisallowToLocatelist.append(self.tilesDisallowToLocate[i].Pack(builder))
            clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, len(self.tilesDisallowToLocate))
            for i in reversed(range(len(self.tilesDisallowToLocate))):
                builder.PrependUOffsetTRelative(tilesDisallowToLocatelist[i])
            tilesDisallowToLocate = builder.EndVector()
        if self.runes is not None:
            runeslist = []
            for i in range(len(self.runes)):
                runeslist.append(self.runes[i].Pack(builder))
            clz_Torappu_LevelDataStartRunesVector(builder, len(self.runes))
            for i in reversed(range(len(self.runes))):
                builder.PrependUOffsetTRelative(runeslist[i])
            runes = builder.EndVector()
        if self.optionalRunes is not None:
            optionalRuneslist = []
            for i in range(len(self.optionalRunes)):
                optionalRuneslist.append(self.optionalRunes[i].Pack(builder))
            clz_Torappu_LevelDataStartOptionalRunesVector(builder, len(self.optionalRunes))
            for i in reversed(range(len(self.optionalRunes))):
                builder.PrependUOffsetTRelative(optionalRuneslist[i])
            optionalRunes = builder.EndVector()
        if self.globalBuffs is not None:
            globalBuffslist = []
            for i in range(len(self.globalBuffs)):
                globalBuffslist.append(self.globalBuffs[i].Pack(builder))
            clz_Torappu_LevelDataStartGlobalBuffsVector(builder, len(self.globalBuffs))
            for i in reversed(range(len(self.globalBuffs))):
                builder.PrependUOffsetTRelative(globalBuffslist[i])
            globalBuffs = builder.EndVector()
        if self.routes is not None:
            routeslist = []
            for i in range(len(self.routes)):
                routeslist.append(self.routes[i].Pack(builder))
            clz_Torappu_LevelDataStartRoutesVector(builder, len(self.routes))
            for i in reversed(range(len(self.routes))):
                builder.PrependUOffsetTRelative(routeslist[i])
            routes = builder.EndVector()
        if self.extraRoutes is not None:
            extraRouteslist = []
            for i in range(len(self.extraRoutes)):
                extraRouteslist.append(self.extraRoutes[i].Pack(builder))
            clz_Torappu_LevelDataStartExtraRoutesVector(builder, len(self.extraRoutes))
            for i in reversed(range(len(self.extraRoutes))):
                builder.PrependUOffsetTRelative(extraRouteslist[i])
            extraRoutes = builder.EndVector()
        if self.enemies is not None:
            enemieslist = []
            for i in range(len(self.enemies)):
                enemieslist.append(self.enemies[i].Pack(builder))
            clz_Torappu_LevelDataStartEnemiesVector(builder, len(self.enemies))
            for i in reversed(range(len(self.enemies))):
                builder.PrependUOffsetTRelative(enemieslist[i])
            enemies = builder.EndVector()
        if self.enemyDbRefs is not None:
            enemyDbRefslist = []
            for i in range(len(self.enemyDbRefs)):
                enemyDbRefslist.append(self.enemyDbRefs[i].Pack(builder))
            clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, len(self.enemyDbRefs))
            for i in reversed(range(len(self.enemyDbRefs))):
                builder.PrependUOffsetTRelative(enemyDbRefslist[i])
            enemyDbRefs = builder.EndVector()
        if self.waves is not None:
            waveslist = []
            for i in range(len(self.waves)):
                waveslist.append(self.waves[i].Pack(builder))
            clz_Torappu_LevelDataStartWavesVector(builder, len(self.waves))
            for i in reversed(range(len(self.waves))):
                builder.PrependUOffsetTRelative(waveslist[i])
            waves = builder.EndVector()
        if self.branches is not None:
            brancheslist = []
            for i in range(len(self.branches)):
                brancheslist.append(self.branches[i].Pack(builder))
            clz_Torappu_LevelDataStartBranchesVector(builder, len(self.branches))
            for i in reversed(range(len(self.branches))):
                builder.PrependUOffsetTRelative(brancheslist[i])
            branches = builder.EndVector()
        if self.predefines is not None:
            predefines = self.predefines.Pack(builder)
        if self.hardPredefines is not None:
            hardPredefines = self.hardPredefines.Pack(builder)
        if self.excludeCharIdList is not None:
            excludeCharIdListlist = []
            for i in range(len(self.excludeCharIdList)):
                excludeCharIdListlist.append(builder.CreateString(self.excludeCharIdList[i]))
            clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, len(self.excludeCharIdList))
            for i in reversed(range(len(self.excludeCharIdList))):
                builder.PrependUOffsetTRelative(excludeCharIdListlist[i])
            excludeCharIdList = builder.EndVector()
        if self.operaConfig is not None:
            operaConfig = builder.CreateString(self.operaConfig)
        if self.cameraPlugin is not None:
            cameraPlugin = builder.CreateString(self.cameraPlugin)
        clz_Torappu_LevelDataStart(builder)
        if self.options is not None:
            clz_Torappu_LevelDataAddOptions(builder, options)
        if self.levelId is not None:
            clz_Torappu_LevelDataAddLevelId(builder, levelId)
        if self.mapId is not None:
            clz_Torappu_LevelDataAddMapId(builder, mapId)
        if self.bgmEvent is not None:
            clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent)
        if self.environmentSe is not None:
            clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe)
        if self.mapData is not None:
            clz_Torappu_LevelDataAddMapData(builder, mapData)
        if self.tilesDisallowToLocate is not None:
            clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate)
        if self.runes is not None:
            clz_Torappu_LevelDataAddRunes(builder, runes)
        if self.optionalRunes is not None:
            clz_Torappu_LevelDataAddOptionalRunes(builder, optionalRunes)
        if self.globalBuffs is not None:
            clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs)
        if self.routes is not None:
            clz_Torappu_LevelDataAddRoutes(builder, routes)
        if self.extraRoutes is not None:
            clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes)
        if self.enemies is not None:
            clz_Torappu_LevelDataAddEnemies(builder, enemies)
        if self.enemyDbRefs is not None:
            clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs)
        if self.waves is not None:
            clz_Torappu_LevelDataAddWaves(builder, waves)
        if self.branches is not None:
            clz_Torappu_LevelDataAddBranches(builder, branches)
        if self.predefines is not None:
            clz_Torappu_LevelDataAddPredefines(builder, predefines)
        if self.hardPredefines is not None:
            clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines)
        if self.excludeCharIdList is not None:
            clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList)
        clz_Torappu_LevelDataAddRandomSeed(builder, self.randomSeed)
        if self.operaConfig is not None:
            clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig)
        if self.cameraPlugin is not None:
            clz_Torappu_LevelDataAddCameraPlugin(builder, cameraPlugin)
        clzTorappuLevelData = clz_Torappu_LevelDataEnd(builder)
        return clzTorappuLevelData
