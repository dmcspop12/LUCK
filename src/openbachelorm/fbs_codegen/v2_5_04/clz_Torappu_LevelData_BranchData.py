# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_BranchData
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_BranchData_PhaseData import clz_Torappu_LevelData_BranchData_PhaseData
            obj = clz_Torappu_LevelData_BranchData_PhaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(1)

def Start(builder):
    clz_Torappu_LevelData_BranchDataStart(builder)

def clz_Torappu_LevelData_BranchDataAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def AddPhases(builder, phases):
    clz_Torappu_LevelData_BranchDataAddPhases(builder, phases)

def clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPhasesVector(builder, numElems):
    return clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, numElems)

def clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_BranchDataEnd(builder)

import clz_Torappu_LevelData_BranchData_PhaseData
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_BranchDataT(object):

    # clz_Torappu_LevelData_BranchDataT
    def __init__(self):
        self.phases = None  # type: List[clz_Torappu_LevelData_BranchData_PhaseData.clz_Torappu_LevelData_BranchData_PhaseDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataBranchData = clz_Torappu_LevelData_BranchData()
        clzTorappuLevelDataBranchData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataBranchData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataBranchData):
        x = clz_Torappu_LevelData_BranchDataT()
        x._UnPack(clzTorappuLevelDataBranchData)
        return x

    # clz_Torappu_LevelData_BranchDataT
    def _UnPack(self, clzTorappuLevelDataBranchData):
        if clzTorappuLevelDataBranchData is None:
            return
        if not clzTorappuLevelDataBranchData.PhasesIsNone():
            self.phases = []
            for i in range(clzTorappuLevelDataBranchData.PhasesLength()):
                if clzTorappuLevelDataBranchData.Phases(i) is None:
                    self.phases.append(None)
                else:
                    clz_Torappu_LevelData_BranchData_PhaseData_ = clz_Torappu_LevelData_BranchData_PhaseData.clz_Torappu_LevelData_BranchData_PhaseDataT.InitFromObj(clzTorappuLevelDataBranchData.Phases(i))
                    self.phases.append(clz_Torappu_LevelData_BranchData_PhaseData_)

    # clz_Torappu_LevelData_BranchDataT
    def Pack(self, builder):
        if self.phases is not None:
            phaseslist = []
            for i in range(len(self.phases)):
                phaseslist.append(self.phases[i].Pack(builder))
            clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, len(self.phases))
            for i in reversed(range(len(self.phases))):
                builder.PrependUOffsetTRelative(phaseslist[i])
            phases = builder.EndVector()
        clz_Torappu_LevelData_BranchDataStart(builder)
        if self.phases is not None:
            clz_Torappu_LevelData_BranchDataAddPhases(builder, phases)
        clzTorappuLevelDataBranchData = clz_Torappu_LevelData_BranchDataEnd(builder)
        return clzTorappuLevelDataBranchData
