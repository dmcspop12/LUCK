# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_EnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_AttributesData import clz_Torappu_AttributesData
            obj = clz_Torappu_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def ApplyWay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def NotCountInTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_EnemyData
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def LifePointReduce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def RangeRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def NumOfExtraDrops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_EnemyData_ESkillData import clz_Torappu_LevelData_EnemyData_ESkillData
            obj = clz_Torappu_LevelData_EnemyData_ESkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def SpData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_LevelData_EnemyData_ESpData import clz_Torappu_LevelData_EnemyData_ESpData
            obj = clz_Torappu_LevelData_EnemyData_ESpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_EnemyDataStart(builder):
    builder.StartObject(17)

def Start(builder):
    clz_Torappu_LevelData_EnemyDataStart(builder)

def clz_Torappu_LevelData_EnemyDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    clz_Torappu_LevelData_EnemyDataAddName(builder, name)

def clz_Torappu_LevelData_EnemyDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def AddDescription(builder, description):
    clz_Torappu_LevelData_EnemyDataAddDescription(builder, description)

def clz_Torappu_LevelData_EnemyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    clz_Torappu_LevelData_EnemyDataAddKey(builder, key)

def clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def AddAttributes(builder, attributes):
    clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes)

def clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, applyWay):
    builder.PrependInt32Slot(4, applyWay, 0)

def AddApplyWay(builder, applyWay):
    clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, applyWay)

def clz_Torappu_LevelData_EnemyDataAddMotion(builder, motion):
    builder.PrependInt32Slot(5, motion, 0)

def AddMotion(builder, motion):
    clz_Torappu_LevelData_EnemyDataAddMotion(builder, motion)

def clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyTags), 0)

def AddEnemyTags(builder, enemyTags):
    clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags)

def clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEnemyTagsVector(builder, numElems):
    return clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, numElems)

def clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, notCountInTotal):
    builder.PrependBoolSlot(7, notCountInTotal, 0)

def AddNotCountInTotal(builder, notCountInTotal):
    clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, notCountInTotal)

def clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def AddAlias(builder, alias):
    clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias)

def clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, lifePointReduce):
    builder.PrependInt32Slot(9, lifePointReduce, 0)

def AddLifePointReduce(builder, lifePointReduce):
    clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, lifePointReduce)

def clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, rangeRadius):
    builder.PrependFloat32Slot(10, rangeRadius, 0.0)

def AddRangeRadius(builder, rangeRadius):
    clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, rangeRadius)

def clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops):
    builder.PrependInt32Slot(11, numOfExtraDrops, 0)

def AddNumOfExtraDrops(builder, numOfExtraDrops):
    clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops)

def clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, viewRadius):
    builder.PrependFloat32Slot(12, viewRadius, 0.0)

def AddViewRadius(builder, viewRadius):
    clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, viewRadius)

def clz_Torappu_LevelData_EnemyDataAddLevelType(builder, levelType):
    builder.PrependInt32Slot(13, levelType, 0)

def AddLevelType(builder, levelType):
    clz_Torappu_LevelData_EnemyDataAddLevelType(builder, levelType)

def clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(talentBlackboard), 0)

def AddTalentBlackboard(builder, talentBlackboard):
    clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard)

def clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTalentBlackboardVector(builder, numElems):
    return clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, numElems)

def clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def AddSkills(builder, skills):
    clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills)

def clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSkillsVector(builder, numElems):
    return clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, numElems)

def clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(spData), 0)

def AddSpData(builder, spData):
    clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData)

def clz_Torappu_LevelData_EnemyDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_EnemyDataEnd(builder)

import clz_Torappu_AttributesData
import clz_Torappu_Blackboard_DataPair
import clz_Torappu_LevelData_EnemyData_ESkillData
import clz_Torappu_LevelData_EnemyData_ESpData
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_EnemyDataT(object):

    # clz_Torappu_LevelData_EnemyDataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.key = None  # type: str
        self.attributes = None  # type: Optional[clz_Torappu_AttributesData.clz_Torappu_AttributesDataT]
        self.applyWay = 0  # type: int
        self.motion = 0  # type: int
        self.enemyTags = None  # type: List[str]
        self.notCountInTotal = False  # type: bool
        self.alias = None  # type: str
        self.lifePointReduce = 0  # type: int
        self.rangeRadius = 0.0  # type: float
        self.numOfExtraDrops = 0  # type: int
        self.viewRadius = 0.0  # type: float
        self.levelType = 0  # type: int
        self.talentBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]
        self.skills = None  # type: List[clz_Torappu_LevelData_EnemyData_ESkillData.clz_Torappu_LevelData_EnemyData_ESkillDataT]
        self.spData = None  # type: Optional[clz_Torappu_LevelData_EnemyData_ESpData.clz_Torappu_LevelData_EnemyData_ESpDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyData = clz_Torappu_LevelData_EnemyData()
        clzTorappuLevelDataEnemyData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyData):
        x = clz_Torappu_LevelData_EnemyDataT()
        x._UnPack(clzTorappuLevelDataEnemyData)
        return x

    # clz_Torappu_LevelData_EnemyDataT
    def _UnPack(self, clzTorappuLevelDataEnemyData):
        if clzTorappuLevelDataEnemyData is None:
            return
        self.name = clzTorappuLevelDataEnemyData.Name()
        self.description = clzTorappuLevelDataEnemyData.Description()
        self.key = clzTorappuLevelDataEnemyData.Key()
        if clzTorappuLevelDataEnemyData.Attributes() is not None:
            self.attributes = clz_Torappu_AttributesData.clz_Torappu_AttributesDataT.InitFromObj(clzTorappuLevelDataEnemyData.Attributes())
        self.applyWay = clzTorappuLevelDataEnemyData.ApplyWay()
        self.motion = clzTorappuLevelDataEnemyData.Motion()
        if not clzTorappuLevelDataEnemyData.EnemyTagsIsNone():
            self.enemyTags = []
            for i in range(clzTorappuLevelDataEnemyData.EnemyTagsLength()):
                self.enemyTags.append(clzTorappuLevelDataEnemyData.EnemyTags(i))
        self.notCountInTotal = clzTorappuLevelDataEnemyData.NotCountInTotal()
        self.alias = clzTorappuLevelDataEnemyData.Alias()
        self.lifePointReduce = clzTorappuLevelDataEnemyData.LifePointReduce()
        self.rangeRadius = clzTorappuLevelDataEnemyData.RangeRadius()
        self.numOfExtraDrops = clzTorappuLevelDataEnemyData.NumOfExtraDrops()
        self.viewRadius = clzTorappuLevelDataEnemyData.ViewRadius()
        self.levelType = clzTorappuLevelDataEnemyData.LevelType()
        if not clzTorappuLevelDataEnemyData.TalentBlackboardIsNone():
            self.talentBlackboard = []
            for i in range(clzTorappuLevelDataEnemyData.TalentBlackboardLength()):
                if clzTorappuLevelDataEnemyData.TalentBlackboard(i) is None:
                    self.talentBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataEnemyData.TalentBlackboard(i))
                    self.talentBlackboard.append(clz_Torappu_Blackboard_DataPair_)
        if not clzTorappuLevelDataEnemyData.SkillsIsNone():
            self.skills = []
            for i in range(clzTorappuLevelDataEnemyData.SkillsLength()):
                if clzTorappuLevelDataEnemyData.Skills(i) is None:
                    self.skills.append(None)
                else:
                    clz_Torappu_LevelData_EnemyData_ESkillData_ = clz_Torappu_LevelData_EnemyData_ESkillData.clz_Torappu_LevelData_EnemyData_ESkillDataT.InitFromObj(clzTorappuLevelDataEnemyData.Skills(i))
                    self.skills.append(clz_Torappu_LevelData_EnemyData_ESkillData_)
        if clzTorappuLevelDataEnemyData.SpData() is not None:
            self.spData = clz_Torappu_LevelData_EnemyData_ESpData.clz_Torappu_LevelData_EnemyData_ESpDataT.InitFromObj(clzTorappuLevelDataEnemyData.SpData())

    # clz_Torappu_LevelData_EnemyDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.attributes is not None:
            attributes = self.attributes.Pack(builder)
        if self.enemyTags is not None:
            enemyTagslist = []
            for i in range(len(self.enemyTags)):
                enemyTagslist.append(builder.CreateString(self.enemyTags[i]))
            clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, len(self.enemyTags))
            for i in reversed(range(len(self.enemyTags))):
                builder.PrependUOffsetTRelative(enemyTagslist[i])
            enemyTags = builder.EndVector()
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.talentBlackboard is not None:
            talentBlackboardlist = []
            for i in range(len(self.talentBlackboard)):
                talentBlackboardlist.append(self.talentBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, len(self.talentBlackboard))
            for i in reversed(range(len(self.talentBlackboard))):
                builder.PrependUOffsetTRelative(talentBlackboardlist[i])
            talentBlackboard = builder.EndVector()
        if self.skills is not None:
            skillslist = []
            for i in range(len(self.skills)):
                skillslist.append(self.skills[i].Pack(builder))
            clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, len(self.skills))
            for i in reversed(range(len(self.skills))):
                builder.PrependUOffsetTRelative(skillslist[i])
            skills = builder.EndVector()
        if self.spData is not None:
            spData = self.spData.Pack(builder)
        clz_Torappu_LevelData_EnemyDataStart(builder)
        if self.name is not None:
            clz_Torappu_LevelData_EnemyDataAddName(builder, name)
        if self.description is not None:
            clz_Torappu_LevelData_EnemyDataAddDescription(builder, description)
        if self.key is not None:
            clz_Torappu_LevelData_EnemyDataAddKey(builder, key)
        if self.attributes is not None:
            clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes)
        clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, self.applyWay)
        clz_Torappu_LevelData_EnemyDataAddMotion(builder, self.motion)
        if self.enemyTags is not None:
            clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags)
        clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, self.notCountInTotal)
        if self.alias is not None:
            clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias)
        clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, self.lifePointReduce)
        clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, self.rangeRadius)
        clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, self.numOfExtraDrops)
        clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, self.viewRadius)
        clz_Torappu_LevelData_EnemyDataAddLevelType(builder, self.levelType)
        if self.talentBlackboard is not None:
            clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard)
        if self.skills is not None:
            clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills)
        if self.spData is not None:
            clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData)
        clzTorappuLevelDataEnemyData = clz_Torappu_LevelData_EnemyDataEnd(builder)
        return clzTorappuLevelDataEnemyData
