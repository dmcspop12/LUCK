# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_Options(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_Options()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_Options(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_Options
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_Options
    def CharacterLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxLifePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def InitialCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def CostIncreaseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def MoveMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def SteeringEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsHardTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsPredefinedCardsSelectable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def MaxPlayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def FunctionDisableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def clz_Torappu_LevelData_OptionsStart(builder):
    builder.StartObject(13)

def Start(builder):
    clz_Torappu_LevelData_OptionsStart(builder)

def clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, characterLimit):
    builder.PrependInt32Slot(0, characterLimit, 0)

def AddCharacterLimit(builder, characterLimit):
    clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, characterLimit)

def clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, maxLifePoint):
    builder.PrependInt32Slot(1, maxLifePoint, 0)

def AddMaxLifePoint(builder, maxLifePoint):
    clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, maxLifePoint)

def clz_Torappu_LevelData_OptionsAddInitialCost(builder, initialCost):
    builder.PrependInt32Slot(2, initialCost, 0)

def AddInitialCost(builder, initialCost):
    clz_Torappu_LevelData_OptionsAddInitialCost(builder, initialCost)

def clz_Torappu_LevelData_OptionsAddMaxCost(builder, maxCost):
    builder.PrependInt32Slot(3, maxCost, 0)

def AddMaxCost(builder, maxCost):
    clz_Torappu_LevelData_OptionsAddMaxCost(builder, maxCost)

def clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, costIncreaseTime):
    builder.PrependFloat32Slot(4, costIncreaseTime, 0.0)

def AddCostIncreaseTime(builder, costIncreaseTime):
    clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, costIncreaseTime)

def clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, moveMultiplier):
    builder.PrependFloat32Slot(5, moveMultiplier, 0.0)

def AddMoveMultiplier(builder, moveMultiplier):
    clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, moveMultiplier)

def clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, steeringEnabled):
    builder.PrependBoolSlot(6, steeringEnabled, 0)

def AddSteeringEnabled(builder, steeringEnabled):
    clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, steeringEnabled)

def clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, isTrainingLevel):
    builder.PrependBoolSlot(7, isTrainingLevel, 0)

def AddIsTrainingLevel(builder, isTrainingLevel):
    clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, isTrainingLevel)

def clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, isHardTrainingLevel):
    builder.PrependBoolSlot(8, isHardTrainingLevel, 0)

def AddIsHardTrainingLevel(builder, isHardTrainingLevel):
    clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, isHardTrainingLevel)

def clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable):
    builder.PrependBoolSlot(9, isPredefinedCardsSelectable, 0)

def AddIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable):
    clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable)

def clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, maxPlayTime):
    builder.PrependFloat32Slot(10, maxPlayTime, 0.0)

def AddMaxPlayTime(builder, maxPlayTime):
    clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, maxPlayTime)

def clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, functionDisableMask):
    builder.PrependInt32Slot(11, functionDisableMask, 0)

def AddFunctionDisableMask(builder, functionDisableMask):
    clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, functionDisableMask)

def clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(configBlackBoard), 0)

def AddConfigBlackBoard(builder, configBlackBoard):
    clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard)

def clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartConfigBlackBoardVector(builder, numElems):
    return clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, numElems)

def clz_Torappu_LevelData_OptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_OptionsEnd(builder)

import clz_Torappu_Blackboard_DataPair
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_OptionsT(object):

    # clz_Torappu_LevelData_OptionsT
    def __init__(self):
        self.characterLimit = 0  # type: int
        self.maxLifePoint = 0  # type: int
        self.initialCost = 0  # type: int
        self.maxCost = 0  # type: int
        self.costIncreaseTime = 0.0  # type: float
        self.moveMultiplier = 0.0  # type: float
        self.steeringEnabled = False  # type: bool
        self.isTrainingLevel = False  # type: bool
        self.isHardTrainingLevel = False  # type: bool
        self.isPredefinedCardsSelectable = False  # type: bool
        self.maxPlayTime = 0.0  # type: float
        self.functionDisableMask = 0  # type: int
        self.configBlackBoard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataOptions = clz_Torappu_LevelData_Options()
        clzTorappuLevelDataOptions.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataOptions):
        x = clz_Torappu_LevelData_OptionsT()
        x._UnPack(clzTorappuLevelDataOptions)
        return x

    # clz_Torappu_LevelData_OptionsT
    def _UnPack(self, clzTorappuLevelDataOptions):
        if clzTorappuLevelDataOptions is None:
            return
        self.characterLimit = clzTorappuLevelDataOptions.CharacterLimit()
        self.maxLifePoint = clzTorappuLevelDataOptions.MaxLifePoint()
        self.initialCost = clzTorappuLevelDataOptions.InitialCost()
        self.maxCost = clzTorappuLevelDataOptions.MaxCost()
        self.costIncreaseTime = clzTorappuLevelDataOptions.CostIncreaseTime()
        self.moveMultiplier = clzTorappuLevelDataOptions.MoveMultiplier()
        self.steeringEnabled = clzTorappuLevelDataOptions.SteeringEnabled()
        self.isTrainingLevel = clzTorappuLevelDataOptions.IsTrainingLevel()
        self.isHardTrainingLevel = clzTorappuLevelDataOptions.IsHardTrainingLevel()
        self.isPredefinedCardsSelectable = clzTorappuLevelDataOptions.IsPredefinedCardsSelectable()
        self.maxPlayTime = clzTorappuLevelDataOptions.MaxPlayTime()
        self.functionDisableMask = clzTorappuLevelDataOptions.FunctionDisableMask()
        if not clzTorappuLevelDataOptions.ConfigBlackBoardIsNone():
            self.configBlackBoard = []
            for i in range(clzTorappuLevelDataOptions.ConfigBlackBoardLength()):
                if clzTorappuLevelDataOptions.ConfigBlackBoard(i) is None:
                    self.configBlackBoard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataOptions.ConfigBlackBoard(i))
                    self.configBlackBoard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_OptionsT
    def Pack(self, builder):
        if self.configBlackBoard is not None:
            configBlackBoardlist = []
            for i in range(len(self.configBlackBoard)):
                configBlackBoardlist.append(self.configBlackBoard[i].Pack(builder))
            clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, len(self.configBlackBoard))
            for i in reversed(range(len(self.configBlackBoard))):
                builder.PrependUOffsetTRelative(configBlackBoardlist[i])
            configBlackBoard = builder.EndVector()
        clz_Torappu_LevelData_OptionsStart(builder)
        clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, self.characterLimit)
        clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, self.maxLifePoint)
        clz_Torappu_LevelData_OptionsAddInitialCost(builder, self.initialCost)
        clz_Torappu_LevelData_OptionsAddMaxCost(builder, self.maxCost)
        clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, self.costIncreaseTime)
        clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, self.moveMultiplier)
        clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, self.steeringEnabled)
        clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, self.isTrainingLevel)
        clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, self.isHardTrainingLevel)
        clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, self.isPredefinedCardsSelectable)
        clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, self.maxPlayTime)
        clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, self.functionDisableMask)
        if self.configBlackBoard is not None:
            clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard)
        clzTorappuLevelDataOptions = clz_Torappu_LevelData_OptionsEnd(builder)
        return clzTorappuLevelDataOptions
