# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_PredefinedData_PredefinedCharacter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCharacter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_CharacterData_UniqueEquipPair import clz_Torappu_CharacterData_UniqueEquipPair
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_CharacterInst_Metadata import clz_Torappu_CharacterInst_Metadata
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder):
    builder.StartObject(11)

def Start(builder):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def AddDirection(builder, direction):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, direction)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, hidden):
    builder.PrependBoolSlot(2, hidden, 0)

def AddHidden(builder, hidden):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, hidden)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def AddAlias(builder, alias):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def AddUniEquipIds(builder, uniEquipIds):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUniEquipIdsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def AddInst(builder, inst):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(6, skillIndex, 0)

def AddSkillIndex(builder, skillIndex):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, skillIndex)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(7, mainSkillLvl, 0)

def AddMainSkillLvl(builder, mainSkillLvl):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, mainSkillLvl)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def AddSkinId(builder, skinId):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def AddTmplId(builder, tmplId):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def AddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOverrideSkillBlackboardVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder)

import clz_Torappu_Blackboard_DataPair
import clz_Torappu_CharacterData_UniqueEquipPair
import clz_Torappu_CharacterInst_Metadata
import clz_Torappu_GridPosition
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT(object):

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def __init__(self):
        self.position = None  # type: Optional[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.direction = 0  # type: int
        self.hidden = False  # type: bool
        self.alias = None  # type: str
        self.uniEquipIds = None  # type: List[clz_Torappu_CharacterData_UniqueEquipPair.clz_Torappu_CharacterData_UniqueEquipPairT]
        self.inst = None  # type: Optional[clz_Torappu_CharacterInst_Metadata.clz_Torappu_CharacterInst_MetadataT]
        self.skillIndex = 0  # type: int
        self.mainSkillLvl = 0  # type: int
        self.skinId = None  # type: str
        self.tmplId = None  # type: str
        self.overrideSkillBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedDataPredefinedCharacter = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
        clzTorappuLevelDataPredefinedDataPredefinedCharacter.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedDataPredefinedCharacter):
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT()
        x._UnPack(clzTorappuLevelDataPredefinedDataPredefinedCharacter)
        return x

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def _UnPack(self, clzTorappuLevelDataPredefinedDataPredefinedCharacter):
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter is None:
            return
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter.Position() is not None:
            self.position = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.Position())
        self.direction = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Direction()
        self.hidden = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Hidden()
        self.alias = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Alias()
        if not clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIdsIsNone():
            self.uniEquipIds = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIdsLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIds(i) is None:
                    self.uniEquipIds.append(None)
                else:
                    clz_Torappu_CharacterData_UniqueEquipPair_ = clz_Torappu_CharacterData_UniqueEquipPair.clz_Torappu_CharacterData_UniqueEquipPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIds(i))
                    self.uniEquipIds.append(clz_Torappu_CharacterData_UniqueEquipPair_)
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter.Inst() is not None:
            self.inst = clz_Torappu_CharacterInst_Metadata.clz_Torappu_CharacterInst_MetadataT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.Inst())
        self.skillIndex = clzTorappuLevelDataPredefinedDataPredefinedCharacter.SkillIndex()
        self.mainSkillLvl = clzTorappuLevelDataPredefinedDataPredefinedCharacter.MainSkillLvl()
        self.skinId = clzTorappuLevelDataPredefinedDataPredefinedCharacter.SkinId()
        self.tmplId = clzTorappuLevelDataPredefinedDataPredefinedCharacter.TmplId()
        if not clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboardIsNone():
            self.overrideSkillBlackboard = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboardLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboard(i) is None:
                    self.overrideSkillBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboard(i))
                    self.overrideSkillBlackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.uniEquipIds is not None:
            uniEquipIdslist = []
            for i in range(len(self.uniEquipIds)):
                uniEquipIdslist.append(self.uniEquipIds[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, len(self.uniEquipIds))
            for i in reversed(range(len(self.uniEquipIds))):
                builder.PrependUOffsetTRelative(uniEquipIdslist[i])
            uniEquipIds = builder.EndVector()
        if self.inst is not None:
            inst = self.inst.Pack(builder)
        if self.skinId is not None:
            skinId = builder.CreateString(self.skinId)
        if self.tmplId is not None:
            tmplId = builder.CreateString(self.tmplId)
        if self.overrideSkillBlackboard is not None:
            overrideSkillBlackboardlist = []
            for i in range(len(self.overrideSkillBlackboard)):
                overrideSkillBlackboardlist.append(self.overrideSkillBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, len(self.overrideSkillBlackboard))
            for i in reversed(range(len(self.overrideSkillBlackboard))):
                builder.PrependUOffsetTRelative(overrideSkillBlackboardlist[i])
            overrideSkillBlackboard = builder.EndVector()
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder)
        if self.position is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, self.direction)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, self.hidden)
        if self.alias is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias)
        if self.uniEquipIds is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds)
        if self.inst is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, self.skillIndex)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, self.mainSkillLvl)
        if self.skinId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId)
        if self.tmplId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId)
        if self.overrideSkillBlackboard is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)
        clzTorappuLevelDataPredefinedDataPredefinedCharacter = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder)
        return clzTorappuLevelDataPredefinedDataPredefinedCharacter
