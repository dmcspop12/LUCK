# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_RouteData_CheckpointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData_CheckpointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData_CheckpointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData_CheckpointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData_CheckpointData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData_CheckpointData
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RouteData_CheckpointData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def ReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_UnityEngine_Vector2 import clz_UnityEngine_Vector2
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def RandomizeReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData_CheckpointData
    def ReachDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_RouteData_CheckpointDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    clz_Torappu_RouteData_CheckpointDataStart(builder)

def clz_Torappu_RouteData_CheckpointDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def AddType(builder, type):
    clz_Torappu_RouteData_CheckpointDataAddType(builder, type)

def clz_Torappu_RouteData_CheckpointDataAddTime(builder, time):
    builder.PrependFloat32Slot(1, time, 0.0)

def AddTime(builder, time):
    clz_Torappu_RouteData_CheckpointDataAddTime(builder, time)

def clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position)

def clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(reachOffset), 0)

def AddReachOffset(builder, reachOffset):
    clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset)

def clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, randomizeReachOffset):
    builder.PrependBoolSlot(4, randomizeReachOffset, 0)

def AddRandomizeReachOffset(builder, randomizeReachOffset):
    clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, randomizeReachOffset)

def clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, reachDistance):
    builder.PrependFloat32Slot(5, reachDistance, 0.0)

def AddReachDistance(builder, reachDistance):
    clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, reachDistance)

def clz_Torappu_RouteData_CheckpointDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_RouteData_CheckpointDataEnd(builder)

import clz_Torappu_GridPosition
import clz_UnityEngine_Vector2
try:
    from typing import Optional
except:
    pass

class clz_Torappu_RouteData_CheckpointDataT(object):

    # clz_Torappu_RouteData_CheckpointDataT
    def __init__(self):
        self.type = 0  # type: int
        self.time = 0.0  # type: float
        self.position = None  # type: Optional[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.reachOffset = None  # type: Optional[clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T]
        self.randomizeReachOffset = False  # type: bool
        self.reachDistance = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuRouteDataCheckpointData = clz_Torappu_RouteData_CheckpointData()
        clzTorappuRouteDataCheckpointData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuRouteDataCheckpointData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuRouteDataCheckpointData):
        x = clz_Torappu_RouteData_CheckpointDataT()
        x._UnPack(clzTorappuRouteDataCheckpointData)
        return x

    # clz_Torappu_RouteData_CheckpointDataT
    def _UnPack(self, clzTorappuRouteDataCheckpointData):
        if clzTorappuRouteDataCheckpointData is None:
            return
        self.type = clzTorappuRouteDataCheckpointData.Type()
        self.time = clzTorappuRouteDataCheckpointData.Time()
        if clzTorappuRouteDataCheckpointData.Position() is not None:
            self.position = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteDataCheckpointData.Position())
        if clzTorappuRouteDataCheckpointData.ReachOffset() is not None:
            self.reachOffset = clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteDataCheckpointData.ReachOffset())
        self.randomizeReachOffset = clzTorappuRouteDataCheckpointData.RandomizeReachOffset()
        self.reachDistance = clzTorappuRouteDataCheckpointData.ReachDistance()

    # clz_Torappu_RouteData_CheckpointDataT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.reachOffset is not None:
            reachOffset = self.reachOffset.Pack(builder)
        clz_Torappu_RouteData_CheckpointDataStart(builder)
        clz_Torappu_RouteData_CheckpointDataAddType(builder, self.type)
        clz_Torappu_RouteData_CheckpointDataAddTime(builder, self.time)
        if self.position is not None:
            clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position)
        if self.reachOffset is not None:
            clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset)
        clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, self.randomizeReachOffset)
        clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, self.reachDistance)
        clzTorappuRouteDataCheckpointData = clz_Torappu_RouteData_CheckpointDataEnd(builder)
        return clzTorappuRouteDataCheckpointData
