# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class dict__string__list_clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LegacyInLevelRuneData import clz_Torappu_LegacyInLevelRuneData
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(2)

def Start(builder):
    dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def AddValue(builder, value):
    dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValueVector(builder, numElems):
    return dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, numElems)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder)

import clz_Torappu_LegacyInLevelRuneData
try:
    from typing import List
except:
    pass

class dict__string__list_clz_Torappu_LegacyInLevelRuneDataT(object):

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: List[clz_Torappu_LegacyInLevelRuneData.clz_Torappu_LegacyInLevelRuneDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dict_string_listClzTorappuLegacyInLevelRuneData = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        dict_string_listClzTorappuLegacyInLevelRuneData.Init(buf, pos)
        return cls.InitFromObj(dict_string_listClzTorappuLegacyInLevelRuneData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dict_string_listClzTorappuLegacyInLevelRuneData):
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneDataT()
        x._UnPack(dict_string_listClzTorappuLegacyInLevelRuneData)
        return x

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def _UnPack(self, dict_string_listClzTorappuLegacyInLevelRuneData):
        if dict_string_listClzTorappuLegacyInLevelRuneData is None:
            return
        self.key = dict_string_listClzTorappuLegacyInLevelRuneData.Key()
        if not dict_string_listClzTorappuLegacyInLevelRuneData.ValueIsNone():
            self.value = []
            for i in range(dict_string_listClzTorappuLegacyInLevelRuneData.ValueLength()):
                if dict_string_listClzTorappuLegacyInLevelRuneData.Value(i) is None:
                    self.value.append(None)
                else:
                    clz_Torappu_LegacyInLevelRuneData_ = clz_Torappu_LegacyInLevelRuneData.clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(dict_string_listClzTorappuLegacyInLevelRuneData.Value(i))
                    self.value.append(clz_Torappu_LegacyInLevelRuneData_)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            valuelist = []
            for i in range(len(self.value)):
                valuelist.append(self.value[i].Pack(builder))
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, len(self.value))
            for i in reversed(range(len(self.value))):
                builder.PrependUOffsetTRelative(valuelist[i])
            value = builder.EndVector()
        dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder)
        if self.key is not None:
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)
        if self.value is not None:
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value)
        dict_string_listClzTorappuLegacyInLevelRuneData = dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder)
        return dict_string_listClzTorappuLegacyInLevelRuneData
