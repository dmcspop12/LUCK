# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LegacyInLevelRuneData
    def DifficultyMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(5)

def Start(builder):
    clz_Torappu_LegacyInLevelRuneDataStart(builder)

def clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask):
    builder.PrependInt32Slot(0, difficultyMask, 0)

def AddDifficultyMask(builder, difficultyMask):
    clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask)

def clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)

def clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(2, professionMask, 0)

def AddProfessionMask(builder, professionMask):
    clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask)

def clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(3, buildableMask, 0)

def AddBuildableMask(builder, buildableMask):
    clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask)

def clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def AddBlackboard(builder, blackboard):
    clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard)

def clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlackboardVector(builder, numElems):
    return clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems)

def clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LegacyInLevelRuneDataEnd(builder)

import clz_Torappu_Blackboard_DataPair
try:
    from typing import List
except:
    pass

class clz_Torappu_LegacyInLevelRuneDataT(object):

    # clz_Torappu_LegacyInLevelRuneDataT
    def __init__(self):
        self.difficultyMask = 0  # type: int
        self.key = None  # type: str
        self.professionMask = 0  # type: int
        self.buildableMask = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLegacyInLevelRuneData = clz_Torappu_LegacyInLevelRuneData()
        clzTorappuLegacyInLevelRuneData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLegacyInLevelRuneData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLegacyInLevelRuneData):
        x = clz_Torappu_LegacyInLevelRuneDataT()
        x._UnPack(clzTorappuLegacyInLevelRuneData)
        return x

    # clz_Torappu_LegacyInLevelRuneDataT
    def _UnPack(self, clzTorappuLegacyInLevelRuneData):
        if clzTorappuLegacyInLevelRuneData is None:
            return
        self.difficultyMask = clzTorappuLegacyInLevelRuneData.DifficultyMask()
        self.key = clzTorappuLegacyInLevelRuneData.Key()
        self.professionMask = clzTorappuLegacyInLevelRuneData.ProfessionMask()
        self.buildableMask = clzTorappuLegacyInLevelRuneData.BuildableMask()
        if not clzTorappuLegacyInLevelRuneData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLegacyInLevelRuneData.BlackboardLength()):
                if clzTorappuLegacyInLevelRuneData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLegacyInLevelRuneData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LegacyInLevelRuneDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        clz_Torappu_LegacyInLevelRuneDataStart(builder)
        clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, self.difficultyMask)
        if self.key is not None:
            clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)
        clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, self.professionMask)
        clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, self.buildableMask)
        if self.blackboard is not None:
            clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard)
        clzTorappuLegacyInLevelRuneData = clz_Torappu_LegacyInLevelRuneDataEnd(builder)
        return clzTorappuLegacyInLevelRuneData
