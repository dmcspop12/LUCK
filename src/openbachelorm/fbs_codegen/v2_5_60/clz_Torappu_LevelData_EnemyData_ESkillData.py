# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_EnemyData_ESkillData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_ESkillData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_ESkillData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Cooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def InitCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def SpCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def AddPrefabKey(builder, prefabKey):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, priority):
    builder.PrependInt32Slot(1, priority, 0)

def AddPriority(builder, priority):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, priority)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, cooldown):
    builder.PrependFloat32Slot(2, cooldown, 0.0)

def AddCooldown(builder, cooldown):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, cooldown)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, initCooldown):
    builder.PrependFloat32Slot(3, initCooldown, 0.0)

def AddInitCooldown(builder, initCooldown):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, initCooldown)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, spCost):
    builder.PrependInt32Slot(4, spCost, 0)

def AddSpCost(builder, spCost):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, spCost)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def AddBlackboard(builder, blackboard):
    clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard)

def clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlackboardVector(builder, numElems):
    return clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, numElems)

def clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder)

import clz_Torappu_Blackboard_DataPair
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_EnemyData_ESkillDataT(object):

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def __init__(self):
        self.prefabKey = None  # type: str
        self.priority = 0  # type: int
        self.cooldown = 0.0  # type: float
        self.initCooldown = 0.0  # type: float
        self.spCost = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyDataEskillData = clz_Torappu_LevelData_EnemyData_ESkillData()
        clzTorappuLevelDataEnemyDataEskillData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyDataEskillData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyDataEskillData):
        x = clz_Torappu_LevelData_EnemyData_ESkillDataT()
        x._UnPack(clzTorappuLevelDataEnemyDataEskillData)
        return x

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def _UnPack(self, clzTorappuLevelDataEnemyDataEskillData):
        if clzTorappuLevelDataEnemyDataEskillData is None:
            return
        self.prefabKey = clzTorappuLevelDataEnemyDataEskillData.PrefabKey()
        self.priority = clzTorappuLevelDataEnemyDataEskillData.Priority()
        self.cooldown = clzTorappuLevelDataEnemyDataEskillData.Cooldown()
        self.initCooldown = clzTorappuLevelDataEnemyDataEskillData.InitCooldown()
        self.spCost = clzTorappuLevelDataEnemyDataEskillData.SpCost()
        if not clzTorappuLevelDataEnemyDataEskillData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLevelDataEnemyDataEskillData.BlackboardLength()):
                if clzTorappuLevelDataEnemyDataEskillData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataEnemyDataEskillData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def Pack(self, builder):
        if self.prefabKey is not None:
            prefabKey = builder.CreateString(self.prefabKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder)
        if self.prefabKey is not None:
            clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, self.priority)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, self.cooldown)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, self.initCooldown)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, self.spCost)
        if self.blackboard is not None:
            clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard)
        clzTorappuLevelDataEnemyDataEskillData = clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder)
        return clzTorappuLevelDataEnemyDataEskillData
