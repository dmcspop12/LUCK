# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from hg__internal__MapData import hg__internal__MapData
            obj = hg__internal__MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def Tiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_TileData import clz_Torappu_TileData
            obj = clz_Torappu_TileData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def TilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MapData
    def BlockEdges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_MapData_Edge import clz_Torappu_MapData_Edge
            obj = clz_Torappu_MapData_Edge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def BlockEdgesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def BlockEdgesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MapData
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MapData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_MapEffectData import clz_Torappu_MapEffectData
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MapData
    def LayerRects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def LayerRectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def LayerRectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_MapDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    clz_Torappu_MapDataStart(builder)

def clz_Torappu_MapDataAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def AddMap(builder, map):
    clz_Torappu_MapDataAddMap(builder, map)

def clz_Torappu_MapDataAddTiles(builder, tiles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tiles), 0)

def AddTiles(builder, tiles):
    clz_Torappu_MapDataAddTiles(builder, tiles)

def clz_Torappu_MapDataStartTilesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTilesVector(builder, numElems):
    return clz_Torappu_MapDataStartTilesVector(builder, numElems)

def clz_Torappu_MapDataAddBlockEdges(builder, blockEdges):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blockEdges), 0)

def AddBlockEdges(builder, blockEdges):
    clz_Torappu_MapDataAddBlockEdges(builder, blockEdges)

def clz_Torappu_MapDataStartBlockEdgesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlockEdgesVector(builder, numElems):
    return clz_Torappu_MapDataStartBlockEdgesVector(builder, numElems)

def clz_Torappu_MapDataAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def AddTags(builder, tags):
    clz_Torappu_MapDataAddTags(builder, tags)

def clz_Torappu_MapDataStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTagsVector(builder, numElems):
    return clz_Torappu_MapDataStartTagsVector(builder, numElems)

def clz_Torappu_MapDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def AddEffects(builder, effects):
    clz_Torappu_MapDataAddEffects(builder, effects)

def clz_Torappu_MapDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEffectsVector(builder, numElems):
    return clz_Torappu_MapDataStartEffectsVector(builder, numElems)

def clz_Torappu_MapDataAddLayerRects(builder, layerRects):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(layerRects), 0)

def AddLayerRects(builder, layerRects):
    clz_Torappu_MapDataAddLayerRects(builder, layerRects)

def clz_Torappu_MapDataStartLayerRectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLayerRectsVector(builder, numElems):
    return clz_Torappu_MapDataStartLayerRectsVector(builder, numElems)

def clz_Torappu_MapDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_MapDataEnd(builder)

import clz_Torappu_MapData_Edge
import clz_Torappu_MapEffectData
import clz_Torappu_TileData
import hg__internal__MapData
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_MapDataT(object):

    # clz_Torappu_MapDataT
    def __init__(self):
        self.map = None  # type: Optional[hg__internal__MapData.hg__internal__MapDataT]
        self.tiles = None  # type: List[clz_Torappu_TileData.clz_Torappu_TileDataT]
        self.blockEdges = None  # type: List[clz_Torappu_MapData_Edge.clz_Torappu_MapData_EdgeT]
        self.tags = None  # type: List[str]
        self.effects = None  # type: List[clz_Torappu_MapEffectData.clz_Torappu_MapEffectDataT]
        self.layerRects = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapData = clz_Torappu_MapData()
        clzTorappuMapData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapData):
        x = clz_Torappu_MapDataT()
        x._UnPack(clzTorappuMapData)
        return x

    # clz_Torappu_MapDataT
    def _UnPack(self, clzTorappuMapData):
        if clzTorappuMapData is None:
            return
        if clzTorappuMapData.Map() is not None:
            self.map = hg__internal__MapData.hg__internal__MapDataT.InitFromObj(clzTorappuMapData.Map())
        if not clzTorappuMapData.TilesIsNone():
            self.tiles = []
            for i in range(clzTorappuMapData.TilesLength()):
                if clzTorappuMapData.Tiles(i) is None:
                    self.tiles.append(None)
                else:
                    clz_Torappu_TileData_ = clz_Torappu_TileData.clz_Torappu_TileDataT.InitFromObj(clzTorappuMapData.Tiles(i))
                    self.tiles.append(clz_Torappu_TileData_)
        if not clzTorappuMapData.BlockEdgesIsNone():
            self.blockEdges = []
            for i in range(clzTorappuMapData.BlockEdgesLength()):
                if clzTorappuMapData.BlockEdges(i) is None:
                    self.blockEdges.append(None)
                else:
                    clz_Torappu_MapData_Edge_ = clz_Torappu_MapData_Edge.clz_Torappu_MapData_EdgeT.InitFromObj(clzTorappuMapData.BlockEdges(i))
                    self.blockEdges.append(clz_Torappu_MapData_Edge_)
        if not clzTorappuMapData.TagsIsNone():
            self.tags = []
            for i in range(clzTorappuMapData.TagsLength()):
                self.tags.append(clzTorappuMapData.Tags(i))
        if not clzTorappuMapData.EffectsIsNone():
            self.effects = []
            for i in range(clzTorappuMapData.EffectsLength()):
                if clzTorappuMapData.Effects(i) is None:
                    self.effects.append(None)
                else:
                    clz_Torappu_MapEffectData_ = clz_Torappu_MapEffectData.clz_Torappu_MapEffectDataT.InitFromObj(clzTorappuMapData.Effects(i))
                    self.effects.append(clz_Torappu_MapEffectData_)
        if not clzTorappuMapData.LayerRectsIsNone():
            self.layerRects = []
            for i in range(clzTorappuMapData.LayerRectsLength()):
                self.layerRects.append(clzTorappuMapData.LayerRects(i))

    # clz_Torappu_MapDataT
    def Pack(self, builder):
        if self.map is not None:
            map = self.map.Pack(builder)
        if self.tiles is not None:
            tileslist = []
            for i in range(len(self.tiles)):
                tileslist.append(self.tiles[i].Pack(builder))
            clz_Torappu_MapDataStartTilesVector(builder, len(self.tiles))
            for i in reversed(range(len(self.tiles))):
                builder.PrependUOffsetTRelative(tileslist[i])
            tiles = builder.EndVector()
        if self.blockEdges is not None:
            blockEdgeslist = []
            for i in range(len(self.blockEdges)):
                blockEdgeslist.append(self.blockEdges[i].Pack(builder))
            clz_Torappu_MapDataStartBlockEdgesVector(builder, len(self.blockEdges))
            for i in reversed(range(len(self.blockEdges))):
                builder.PrependUOffsetTRelative(blockEdgeslist[i])
            blockEdges = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            clz_Torappu_MapDataStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.effects is not None:
            effectslist = []
            for i in range(len(self.effects)):
                effectslist.append(self.effects[i].Pack(builder))
            clz_Torappu_MapDataStartEffectsVector(builder, len(self.effects))
            for i in reversed(range(len(self.effects))):
                builder.PrependUOffsetTRelative(effectslist[i])
            effects = builder.EndVector()
        if self.layerRects is not None:
            layerRectslist = []
            for i in range(len(self.layerRects)):
                layerRectslist.append(builder.CreateString(self.layerRects[i]))
            clz_Torappu_MapDataStartLayerRectsVector(builder, len(self.layerRects))
            for i in reversed(range(len(self.layerRects))):
                builder.PrependUOffsetTRelative(layerRectslist[i])
            layerRects = builder.EndVector()
        clz_Torappu_MapDataStart(builder)
        if self.map is not None:
            clz_Torappu_MapDataAddMap(builder, map)
        if self.tiles is not None:
            clz_Torappu_MapDataAddTiles(builder, tiles)
        if self.blockEdges is not None:
            clz_Torappu_MapDataAddBlockEdges(builder, blockEdges)
        if self.tags is not None:
            clz_Torappu_MapDataAddTags(builder, tags)
        if self.effects is not None:
            clz_Torappu_MapDataAddEffects(builder, effects)
        if self.layerRects is not None:
            clz_Torappu_MapDataAddLayerRects(builder, layerRects)
        clzTorappuMapData = clz_Torappu_MapDataEnd(builder)
        return clzTorappuMapData
