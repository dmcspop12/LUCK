# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_TileData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TileData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TileData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TileData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TileData
    def TileKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TileData
    def HeightType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def BuildableType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PassableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_TileData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_MapEffectData import clz_Torappu_MapEffectData
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_TileDataStart(builder):
    builder.StartObject(7)

def Start(builder):
    clz_Torappu_TileDataStart(builder)

def clz_Torappu_TileDataAddTileKey(builder, tileKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tileKey), 0)

def AddTileKey(builder, tileKey):
    clz_Torappu_TileDataAddTileKey(builder, tileKey)

def clz_Torappu_TileDataAddHeightType(builder, heightType):
    builder.PrependInt32Slot(1, heightType, 0)

def AddHeightType(builder, heightType):
    clz_Torappu_TileDataAddHeightType(builder, heightType)

def clz_Torappu_TileDataAddBuildableType(builder, buildableType):
    builder.PrependInt32Slot(2, buildableType, 0)

def AddBuildableType(builder, buildableType):
    clz_Torappu_TileDataAddBuildableType(builder, buildableType)

def clz_Torappu_TileDataAddPassableMask(builder, passableMask):
    builder.PrependInt32Slot(3, passableMask, 0)

def AddPassableMask(builder, passableMask):
    clz_Torappu_TileDataAddPassableMask(builder, passableMask)

def clz_Torappu_TileDataAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(4, playerSideMask, 0)

def AddPlayerSideMask(builder, playerSideMask):
    clz_Torappu_TileDataAddPlayerSideMask(builder, playerSideMask)

def clz_Torappu_TileDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def AddBlackboard(builder, blackboard):
    clz_Torappu_TileDataAddBlackboard(builder, blackboard)

def clz_Torappu_TileDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlackboardVector(builder, numElems):
    return clz_Torappu_TileDataStartBlackboardVector(builder, numElems)

def clz_Torappu_TileDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def AddEffects(builder, effects):
    clz_Torappu_TileDataAddEffects(builder, effects)

def clz_Torappu_TileDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartEffectsVector(builder, numElems):
    return clz_Torappu_TileDataStartEffectsVector(builder, numElems)

def clz_Torappu_TileDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_TileDataEnd(builder)

import clz_Torappu_Blackboard_DataPair
import clz_Torappu_MapEffectData
try:
    from typing import List
except:
    pass

class clz_Torappu_TileDataT(object):

    # clz_Torappu_TileDataT
    def __init__(self):
        self.tileKey = None  # type: str
        self.heightType = 0  # type: int
        self.buildableType = 0  # type: int
        self.passableMask = 0  # type: int
        self.playerSideMask = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]
        self.effects = None  # type: List[clz_Torappu_MapEffectData.clz_Torappu_MapEffectDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuTileData = clz_Torappu_TileData()
        clzTorappuTileData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuTileData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuTileData):
        x = clz_Torappu_TileDataT()
        x._UnPack(clzTorappuTileData)
        return x

    # clz_Torappu_TileDataT
    def _UnPack(self, clzTorappuTileData):
        if clzTorappuTileData is None:
            return
        self.tileKey = clzTorappuTileData.TileKey()
        self.heightType = clzTorappuTileData.HeightType()
        self.buildableType = clzTorappuTileData.BuildableType()
        self.passableMask = clzTorappuTileData.PassableMask()
        self.playerSideMask = clzTorappuTileData.PlayerSideMask()
        if not clzTorappuTileData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuTileData.BlackboardLength()):
                if clzTorappuTileData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuTileData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)
        if not clzTorappuTileData.EffectsIsNone():
            self.effects = []
            for i in range(clzTorappuTileData.EffectsLength()):
                if clzTorappuTileData.Effects(i) is None:
                    self.effects.append(None)
                else:
                    clz_Torappu_MapEffectData_ = clz_Torappu_MapEffectData.clz_Torappu_MapEffectDataT.InitFromObj(clzTorappuTileData.Effects(i))
                    self.effects.append(clz_Torappu_MapEffectData_)

    # clz_Torappu_TileDataT
    def Pack(self, builder):
        if self.tileKey is not None:
            tileKey = builder.CreateString(self.tileKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_TileDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        if self.effects is not None:
            effectslist = []
            for i in range(len(self.effects)):
                effectslist.append(self.effects[i].Pack(builder))
            clz_Torappu_TileDataStartEffectsVector(builder, len(self.effects))
            for i in reversed(range(len(self.effects))):
                builder.PrependUOffsetTRelative(effectslist[i])
            effects = builder.EndVector()
        clz_Torappu_TileDataStart(builder)
        if self.tileKey is not None:
            clz_Torappu_TileDataAddTileKey(builder, tileKey)
        clz_Torappu_TileDataAddHeightType(builder, self.heightType)
        clz_Torappu_TileDataAddBuildableType(builder, self.buildableType)
        clz_Torappu_TileDataAddPassableMask(builder, self.passableMask)
        clz_Torappu_TileDataAddPlayerSideMask(builder, self.playerSideMask)
        if self.blackboard is not None:
            clz_Torappu_TileDataAddBlackboard(builder, blackboard)
        if self.effects is not None:
            clz_Torappu_TileDataAddEffects(builder, effects)
        clzTorappuTileData = clz_Torappu_TileDataEnd(builder)
        return clzTorappuTileData
