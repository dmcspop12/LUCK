# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_GlobalBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_GlobalBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_GlobalBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_GlobalBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_GlobalBuffData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_GlobalBuffData
    def OverrideCameraEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def PassProfessionMaskFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_GlobalBuffData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_LevelData_GlobalBuffDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    clz_Torappu_LevelData_GlobalBuffDataStart(builder)

def clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def AddPrefabKey(builder, prefabKey):
    clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey)

def clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def AddBlackboard(builder, blackboard):
    clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard)

def clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBlackboardVector(builder, numElems):
    return clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, numElems)

def clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(overrideCameraEffect), 0)

def AddOverrideCameraEffect(builder, overrideCameraEffect):
    clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect)

def clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, passProfessionMaskFlag):
    builder.PrependBoolSlot(3, passProfessionMaskFlag, 0)

def AddPassProfessionMaskFlag(builder, passProfessionMaskFlag):
    clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, passProfessionMaskFlag)

def clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(4, professionMask, 0)

def AddProfessionMask(builder, professionMask):
    clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, professionMask)

def clz_Torappu_LevelData_GlobalBuffDataAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(5, playerSideMask, 0)

def AddPlayerSideMask(builder, playerSideMask):
    clz_Torappu_LevelData_GlobalBuffDataAddPlayerSideMask(builder, playerSideMask)

def clz_Torappu_LevelData_GlobalBuffDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_GlobalBuffDataEnd(builder)

import clz_Torappu_Blackboard_DataPair
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_GlobalBuffDataT(object):

    # clz_Torappu_LevelData_GlobalBuffDataT
    def __init__(self):
        self.prefabKey = None  # type: str
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]
        self.overrideCameraEffect = None  # type: str
        self.passProfessionMaskFlag = False  # type: bool
        self.professionMask = 0  # type: int
        self.playerSideMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataGlobalBuffData = clz_Torappu_LevelData_GlobalBuffData()
        clzTorappuLevelDataGlobalBuffData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataGlobalBuffData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataGlobalBuffData):
        x = clz_Torappu_LevelData_GlobalBuffDataT()
        x._UnPack(clzTorappuLevelDataGlobalBuffData)
        return x

    # clz_Torappu_LevelData_GlobalBuffDataT
    def _UnPack(self, clzTorappuLevelDataGlobalBuffData):
        if clzTorappuLevelDataGlobalBuffData is None:
            return
        self.prefabKey = clzTorappuLevelDataGlobalBuffData.PrefabKey()
        if not clzTorappuLevelDataGlobalBuffData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLevelDataGlobalBuffData.BlackboardLength()):
                if clzTorappuLevelDataGlobalBuffData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataGlobalBuffData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)
        self.overrideCameraEffect = clzTorappuLevelDataGlobalBuffData.OverrideCameraEffect()
        self.passProfessionMaskFlag = clzTorappuLevelDataGlobalBuffData.PassProfessionMaskFlag()
        self.professionMask = clzTorappuLevelDataGlobalBuffData.ProfessionMask()
        self.playerSideMask = clzTorappuLevelDataGlobalBuffData.PlayerSideMask()

    # clz_Torappu_LevelData_GlobalBuffDataT
    def Pack(self, builder):
        if self.prefabKey is not None:
            prefabKey = builder.CreateString(self.prefabKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        if self.overrideCameraEffect is not None:
            overrideCameraEffect = builder.CreateString(self.overrideCameraEffect)
        clz_Torappu_LevelData_GlobalBuffDataStart(builder)
        if self.prefabKey is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey)
        if self.blackboard is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard)
        if self.overrideCameraEffect is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect)
        clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, self.passProfessionMaskFlag)
        clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, self.professionMask)
        clz_Torappu_LevelData_GlobalBuffDataAddPlayerSideMask(builder, self.playerSideMask)
        clzTorappuLevelDataGlobalBuffData = clz_Torappu_LevelData_GlobalBuffDataEnd(builder)
        return clzTorappuLevelDataGlobalBuffData
