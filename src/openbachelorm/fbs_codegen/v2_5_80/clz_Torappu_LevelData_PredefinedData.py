# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_PredefinedData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_PredefinedData_PredefinedCharacter import clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_PredefinedData_PredefinedCharacter import clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_PredefinedData_PredefinedCard import clz_Torappu_LevelData_PredefinedData_PredefinedCard
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard import clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_LevelData_PredefinedDataStart(builder):
    builder.StartObject(4)

def Start(builder):
    clz_Torappu_LevelData_PredefinedDataStart(builder)

def clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterInsts), 0)

def AddCharacterInsts(builder, characterInsts):
    clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts)

def clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCharacterInstsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tokenInsts), 0)

def AddTokenInsts(builder, tokenInsts):
    clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts)

def clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTokenInstsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(characterCards), 0)

def AddCharacterCards(builder, characterCards):
    clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards)

def clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCharacterCardsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenCards), 0)

def AddTokenCards(builder, tokenCards):
    clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards)

def clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTokenCardsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_PredefinedDataEnd(builder)

import clz_Torappu_LevelData_PredefinedData_PredefinedCard
import clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
import clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_PredefinedDataT(object):

    # clz_Torappu_LevelData_PredefinedDataT
    def __init__(self):
        self.characterInsts = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCharacter.clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT]
        self.tokenInsts = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCharacter.clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT]
        self.characterCards = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCard.clz_Torappu_LevelData_PredefinedData_PredefinedCardT]
        self.tokenCards = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard.clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedData = clz_Torappu_LevelData_PredefinedData()
        clzTorappuLevelDataPredefinedData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedData):
        x = clz_Torappu_LevelData_PredefinedDataT()
        x._UnPack(clzTorappuLevelDataPredefinedData)
        return x

    # clz_Torappu_LevelData_PredefinedDataT
    def _UnPack(self, clzTorappuLevelDataPredefinedData):
        if clzTorappuLevelDataPredefinedData is None:
            return
        if not clzTorappuLevelDataPredefinedData.CharacterInstsIsNone():
            self.characterInsts = []
            for i in range(clzTorappuLevelDataPredefinedData.CharacterInstsLength()):
                if clzTorappuLevelDataPredefinedData.CharacterInsts(i) is None:
                    self.characterInsts.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_ = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter.clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT.InitFromObj(clzTorappuLevelDataPredefinedData.CharacterInsts(i))
                    self.characterInsts.append(clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_)
        if not clzTorappuLevelDataPredefinedData.TokenInstsIsNone():
            self.tokenInsts = []
            for i in range(clzTorappuLevelDataPredefinedData.TokenInstsLength()):
                if clzTorappuLevelDataPredefinedData.TokenInsts(i) is None:
                    self.tokenInsts.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_ = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter.clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT.InitFromObj(clzTorappuLevelDataPredefinedData.TokenInsts(i))
                    self.tokenInsts.append(clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_)
        if not clzTorappuLevelDataPredefinedData.CharacterCardsIsNone():
            self.characterCards = []
            for i in range(clzTorappuLevelDataPredefinedData.CharacterCardsLength()):
                if clzTorappuLevelDataPredefinedData.CharacterCards(i) is None:
                    self.characterCards.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCard_ = clz_Torappu_LevelData_PredefinedData_PredefinedCard.clz_Torappu_LevelData_PredefinedData_PredefinedCardT.InitFromObj(clzTorappuLevelDataPredefinedData.CharacterCards(i))
                    self.characterCards.append(clz_Torappu_LevelData_PredefinedData_PredefinedCard_)
        if not clzTorappuLevelDataPredefinedData.TokenCardsIsNone():
            self.tokenCards = []
            for i in range(clzTorappuLevelDataPredefinedData.TokenCardsLength()):
                if clzTorappuLevelDataPredefinedData.TokenCards(i) is None:
                    self.tokenCards.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard_ = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard.clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT.InitFromObj(clzTorappuLevelDataPredefinedData.TokenCards(i))
                    self.tokenCards.append(clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard_)

    # clz_Torappu_LevelData_PredefinedDataT
    def Pack(self, builder):
        if self.characterInsts is not None:
            characterInstslist = []
            for i in range(len(self.characterInsts)):
                characterInstslist.append(self.characterInsts[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, len(self.characterInsts))
            for i in reversed(range(len(self.characterInsts))):
                builder.PrependUOffsetTRelative(characterInstslist[i])
            characterInsts = builder.EndVector()
        if self.tokenInsts is not None:
            tokenInstslist = []
            for i in range(len(self.tokenInsts)):
                tokenInstslist.append(self.tokenInsts[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, len(self.tokenInsts))
            for i in reversed(range(len(self.tokenInsts))):
                builder.PrependUOffsetTRelative(tokenInstslist[i])
            tokenInsts = builder.EndVector()
        if self.characterCards is not None:
            characterCardslist = []
            for i in range(len(self.characterCards)):
                characterCardslist.append(self.characterCards[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, len(self.characterCards))
            for i in reversed(range(len(self.characterCards))):
                builder.PrependUOffsetTRelative(characterCardslist[i])
            characterCards = builder.EndVector()
        if self.tokenCards is not None:
            tokenCardslist = []
            for i in range(len(self.tokenCards)):
                tokenCardslist.append(self.tokenCards[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, len(self.tokenCards))
            for i in reversed(range(len(self.tokenCards))):
                builder.PrependUOffsetTRelative(tokenCardslist[i])
            tokenCards = builder.EndVector()
        clz_Torappu_LevelData_PredefinedDataStart(builder)
        if self.characterInsts is not None:
            clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts)
        if self.tokenInsts is not None:
            clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts)
        if self.characterCards is not None:
            clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards)
        if self.tokenCards is not None:
            clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards)
        clzTorappuLevelDataPredefinedData = clz_Torappu_LevelData_PredefinedDataEnd(builder)
        return clzTorappuLevelDataPredefinedData
