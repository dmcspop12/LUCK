# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_MapData_Edge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData_Edge()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData_Edge(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData_Edge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData_Edge
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData_Edge
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MapData_Edge
    def BlockMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapData_EdgeStart(builder):
    builder.StartObject(3)

def Start(builder):
    clz_Torappu_MapData_EdgeStart(builder)

def clz_Torappu_MapData_EdgeAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def AddPos(builder, pos):
    clz_Torappu_MapData_EdgeAddPos(builder, pos)

def clz_Torappu_MapData_EdgeAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def AddDirection(builder, direction):
    clz_Torappu_MapData_EdgeAddDirection(builder, direction)

def clz_Torappu_MapData_EdgeAddBlockMask(builder, blockMask):
    builder.PrependInt32Slot(2, blockMask, 0)

def AddBlockMask(builder, blockMask):
    clz_Torappu_MapData_EdgeAddBlockMask(builder, blockMask)

def clz_Torappu_MapData_EdgeEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_MapData_EdgeEnd(builder)

import clz_Torappu_GridPosition
try:
    from typing import Optional
except:
    pass

class clz_Torappu_MapData_EdgeT(object):

    # clz_Torappu_MapData_EdgeT
    def __init__(self):
        self.pos = None  # type: Optional[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.direction = 0  # type: int
        self.blockMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapDataEdge = clz_Torappu_MapData_Edge()
        clzTorappuMapDataEdge.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapDataEdge)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapDataEdge):
        x = clz_Torappu_MapData_EdgeT()
        x._UnPack(clzTorappuMapDataEdge)
        return x

    # clz_Torappu_MapData_EdgeT
    def _UnPack(self, clzTorappuMapDataEdge):
        if clzTorappuMapDataEdge is None:
            return
        if clzTorappuMapDataEdge.Pos() is not None:
            self.pos = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuMapDataEdge.Pos())
        self.direction = clzTorappuMapDataEdge.Direction()
        self.blockMask = clzTorappuMapDataEdge.BlockMask()

    # clz_Torappu_MapData_EdgeT
    def Pack(self, builder):
        if self.pos is not None:
            pos = self.pos.Pack(builder)
        clz_Torappu_MapData_EdgeStart(builder)
        if self.pos is not None:
            clz_Torappu_MapData_EdgeAddPos(builder, pos)
        clz_Torappu_MapData_EdgeAddDirection(builder, self.direction)
        clz_Torappu_MapData_EdgeAddBlockMask(builder, self.blockMask)
        clzTorappuMapDataEdge = clz_Torappu_MapData_EdgeEnd(builder)
        return clzTorappuMapDataEdge
