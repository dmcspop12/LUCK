# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_UnityEngine_Vector3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector3()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector3(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector3Start(builder):
    builder.StartObject(3)

def Start(builder):
    clz_UnityEngine_Vector3Start(builder)

def clz_UnityEngine_Vector3AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def AddX(builder, x):
    clz_UnityEngine_Vector3AddX(builder, x)

def clz_UnityEngine_Vector3AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def AddY(builder, y):
    clz_UnityEngine_Vector3AddY(builder, y)

def clz_UnityEngine_Vector3AddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def AddZ(builder, z):
    clz_UnityEngine_Vector3AddZ(builder, z)

def clz_UnityEngine_Vector3End(builder):
    return builder.EndObject()

def End(builder):
    return clz_UnityEngine_Vector3End(builder)


class clz_UnityEngine_Vector3T(object):

    # clz_UnityEngine_Vector3T
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzUnityEngineVector3 = clz_UnityEngine_Vector3()
        clzUnityEngineVector3.Init(buf, pos)
        return cls.InitFromObj(clzUnityEngineVector3)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzUnityEngineVector3):
        x = clz_UnityEngine_Vector3T()
        x._UnPack(clzUnityEngineVector3)
        return x

    # clz_UnityEngine_Vector3T
    def _UnPack(self, clzUnityEngineVector3):
        if clzUnityEngineVector3 is None:
            return
        self.x = clzUnityEngineVector3.X()
        self.y = clzUnityEngineVector3.Y()
        self.z = clzUnityEngineVector3.Z()

    # clz_UnityEngine_Vector3T
    def Pack(self, builder):
        clz_UnityEngine_Vector3Start(builder)
        clz_UnityEngine_Vector3AddX(builder, self.x)
        clz_UnityEngine_Vector3AddY(builder, self.y)
        clz_UnityEngine_Vector3AddZ(builder, self.z)
        clzUnityEngineVector3 = clz_UnityEngine_Vector3End(builder)
        return clzUnityEngineVector3
