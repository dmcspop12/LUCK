# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_WaveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def PostDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def MaxTimeWaitingForNextWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def Fragments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_LevelData_WaveData_FragmentData import clz_Torappu_LevelData_WaveData_FragmentData
            obj = clz_Torappu_LevelData_WaveData_FragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData
    def FragmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData
    def FragmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_WaveData
    def AdvancedWaveTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_LevelData_WaveDataStart(builder):
    builder.StartObject(5)

def Start(builder):
    clz_Torappu_LevelData_WaveDataStart(builder)

def clz_Torappu_LevelData_WaveDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def AddPreDelay(builder, preDelay):
    clz_Torappu_LevelData_WaveDataAddPreDelay(builder, preDelay)

def clz_Torappu_LevelData_WaveDataAddPostDelay(builder, postDelay):
    builder.PrependFloat32Slot(1, postDelay, 0.0)

def AddPostDelay(builder, postDelay):
    clz_Torappu_LevelData_WaveDataAddPostDelay(builder, postDelay)

def clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave):
    builder.PrependFloat32Slot(2, maxTimeWaitingForNextWave, 0.0)

def AddMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave):
    clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave)

def clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fragments), 0)

def AddFragments(builder, fragments):
    clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments)

def clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFragmentsVector(builder, numElems):
    return clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, numElems)

def clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(advancedWaveTag), 0)

def AddAdvancedWaveTag(builder, advancedWaveTag):
    clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag)

def clz_Torappu_LevelData_WaveDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_WaveDataEnd(builder)

import clz_Torappu_LevelData_WaveData_FragmentData
try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_WaveDataT(object):

    # clz_Torappu_LevelData_WaveDataT
    def __init__(self):
        self.preDelay = 0.0  # type: float
        self.postDelay = 0.0  # type: float
        self.maxTimeWaitingForNextWave = 0.0  # type: float
        self.fragments = None  # type: List[clz_Torappu_LevelData_WaveData_FragmentData.clz_Torappu_LevelData_WaveData_FragmentDataT]
        self.advancedWaveTag = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveData = clz_Torappu_LevelData_WaveData()
        clzTorappuLevelDataWaveData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveData):
        x = clz_Torappu_LevelData_WaveDataT()
        x._UnPack(clzTorappuLevelDataWaveData)
        return x

    # clz_Torappu_LevelData_WaveDataT
    def _UnPack(self, clzTorappuLevelDataWaveData):
        if clzTorappuLevelDataWaveData is None:
            return
        self.preDelay = clzTorappuLevelDataWaveData.PreDelay()
        self.postDelay = clzTorappuLevelDataWaveData.PostDelay()
        self.maxTimeWaitingForNextWave = clzTorappuLevelDataWaveData.MaxTimeWaitingForNextWave()
        if not clzTorappuLevelDataWaveData.FragmentsIsNone():
            self.fragments = []
            for i in range(clzTorappuLevelDataWaveData.FragmentsLength()):
                if clzTorappuLevelDataWaveData.Fragments(i) is None:
                    self.fragments.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_FragmentData_ = clz_Torappu_LevelData_WaveData_FragmentData.clz_Torappu_LevelData_WaveData_FragmentDataT.InitFromObj(clzTorappuLevelDataWaveData.Fragments(i))
                    self.fragments.append(clz_Torappu_LevelData_WaveData_FragmentData_)
        self.advancedWaveTag = clzTorappuLevelDataWaveData.AdvancedWaveTag()

    # clz_Torappu_LevelData_WaveDataT
    def Pack(self, builder):
        if self.fragments is not None:
            fragmentslist = []
            for i in range(len(self.fragments)):
                fragmentslist.append(self.fragments[i].Pack(builder))
            clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, len(self.fragments))
            for i in reversed(range(len(self.fragments))):
                builder.PrependUOffsetTRelative(fragmentslist[i])
            fragments = builder.EndVector()
        if self.advancedWaveTag is not None:
            advancedWaveTag = builder.CreateString(self.advancedWaveTag)
        clz_Torappu_LevelData_WaveDataStart(builder)
        clz_Torappu_LevelData_WaveDataAddPreDelay(builder, self.preDelay)
        clz_Torappu_LevelData_WaveDataAddPostDelay(builder, self.postDelay)
        clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, self.maxTimeWaitingForNextWave)
        if self.fragments is not None:
            clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments)
        if self.advancedWaveTag is not None:
            clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag)
        clzTorappuLevelDataWaveData = clz_Torappu_LevelData_WaveDataEnd(builder)
        return clzTorappuLevelDataWaveData
