# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_MapEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapEffectData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MapEffectData
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_UnityEngine_Vector3 import clz_UnityEngine_Vector3
            obj = clz_UnityEngine_Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapEffectData
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapEffectDataStart(builder):
    builder.StartObject(3)

def Start(builder):
    clz_Torappu_MapEffectDataStart(builder)

def clz_Torappu_MapEffectDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    clz_Torappu_MapEffectDataAddKey(builder, key)

def clz_Torappu_MapEffectDataAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def AddOffset(builder, offset):
    clz_Torappu_MapEffectDataAddOffset(builder, offset)

def clz_Torappu_MapEffectDataAddDirection(builder, direction):
    builder.PrependInt32Slot(2, direction, 0)

def AddDirection(builder, direction):
    clz_Torappu_MapEffectDataAddDirection(builder, direction)

def clz_Torappu_MapEffectDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_MapEffectDataEnd(builder)

import clz_UnityEngine_Vector3
try:
    from typing import Optional
except:
    pass

class clz_Torappu_MapEffectDataT(object):

    # clz_Torappu_MapEffectDataT
    def __init__(self):
        self.key = None  # type: str
        self.offset = None  # type: Optional[clz_UnityEngine_Vector3.clz_UnityEngine_Vector3T]
        self.direction = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapEffectData = clz_Torappu_MapEffectData()
        clzTorappuMapEffectData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapEffectData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapEffectData):
        x = clz_Torappu_MapEffectDataT()
        x._UnPack(clzTorappuMapEffectData)
        return x

    # clz_Torappu_MapEffectDataT
    def _UnPack(self, clzTorappuMapEffectData):
        if clzTorappuMapEffectData is None:
            return
        self.key = clzTorappuMapEffectData.Key()
        if clzTorappuMapEffectData.Offset() is not None:
            self.offset = clz_UnityEngine_Vector3.clz_UnityEngine_Vector3T.InitFromObj(clzTorappuMapEffectData.Offset())
        self.direction = clzTorappuMapEffectData.Direction()

    # clz_Torappu_MapEffectDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.offset is not None:
            offset = self.offset.Pack(builder)
        clz_Torappu_MapEffectDataStart(builder)
        if self.key is not None:
            clz_Torappu_MapEffectDataAddKey(builder, key)
        if self.offset is not None:
            clz_Torappu_MapEffectDataAddOffset(builder, offset)
        clz_Torappu_MapEffectDataAddDirection(builder, self.direction)
        clzTorappuMapEffectData = clz_Torappu_MapEffectDataEnd(builder)
        return clzTorappuMapEffectData
