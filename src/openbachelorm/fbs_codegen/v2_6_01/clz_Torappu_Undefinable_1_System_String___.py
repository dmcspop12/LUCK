# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_Undefinable_1_System_String___(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_String___()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_String___(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_String___
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_String___
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_String___
    def MValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Undefinable_1_System_String___
    def MValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Undefinable_1_System_String___
    def MValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Undefinable_1_System_String___Start(builder):
    builder.StartObject(2)

def Start(builder):
    clz_Torappu_Undefinable_1_System_String___Start(builder)

def clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def AddMDefined(builder, mDefined):
    clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, mDefined)

def clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mValue), 0)

def AddMValue(builder, mValue):
    clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue)

def clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMValueVector(builder, numElems):
    return clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, numElems)

def clz_Torappu_Undefinable_1_System_String___End(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_Undefinable_1_System_String___End(builder)

try:
    from typing import List
except:
    pass

class clz_Torappu_Undefinable_1_System_String___T(object):

    # clz_Torappu_Undefinable_1_System_String___T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemString__ = clz_Torappu_Undefinable_1_System_String___()
        clzTorappuUndefinable1SystemString__.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemString__)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemString__):
        x = clz_Torappu_Undefinable_1_System_String___T()
        x._UnPack(clzTorappuUndefinable1SystemString__)
        return x

    # clz_Torappu_Undefinable_1_System_String___T
    def _UnPack(self, clzTorappuUndefinable1SystemString__):
        if clzTorappuUndefinable1SystemString__ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemString__.MDefined()
        if not clzTorappuUndefinable1SystemString__.MValueIsNone():
            self.mValue = []
            for i in range(clzTorappuUndefinable1SystemString__.MValueLength()):
                self.mValue.append(clzTorappuUndefinable1SystemString__.MValue(i))

    # clz_Torappu_Undefinable_1_System_String___T
    def Pack(self, builder):
        if self.mValue is not None:
            mValuelist = []
            for i in range(len(self.mValue)):
                mValuelist.append(builder.CreateString(self.mValue[i]))
            clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, len(self.mValue))
            for i in reversed(range(len(self.mValue))):
                builder.PrependUOffsetTRelative(mValuelist[i])
            mValue = builder.EndVector()
        clz_Torappu_Undefinable_1_System_String___Start(builder)
        clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, self.mDefined)
        if self.mValue is not None:
            clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue)
        clzTorappuUndefinable1SystemString__ = clz_Torappu_Undefinable_1_System_String___End(builder)
        return clzTorappuUndefinable1SystemString__
