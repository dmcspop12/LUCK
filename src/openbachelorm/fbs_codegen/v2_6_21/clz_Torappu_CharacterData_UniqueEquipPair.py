# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_CharacterData_UniqueEquipPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_UniqueEquipPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_UniqueEquipPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_UniqueEquipPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_UniqueEquipPairStart(builder):
    builder.StartObject(2)

def Start(builder):
    clz_Torappu_CharacterData_UniqueEquipPairStart(builder)

def clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key)

def clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def AddLevel(builder, level):
    clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, level)

def clz_Torappu_CharacterData_UniqueEquipPairEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_CharacterData_UniqueEquipPairEnd(builder)


class clz_Torappu_CharacterData_UniqueEquipPairT(object):

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def __init__(self):
        self.key = None  # type: str
        self.level = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuCharacterDataUniqueEquipPair = clz_Torappu_CharacterData_UniqueEquipPair()
        clzTorappuCharacterDataUniqueEquipPair.Init(buf, pos)
        return cls.InitFromObj(clzTorappuCharacterDataUniqueEquipPair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuCharacterDataUniqueEquipPair):
        x = clz_Torappu_CharacterData_UniqueEquipPairT()
        x._UnPack(clzTorappuCharacterDataUniqueEquipPair)
        return x

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def _UnPack(self, clzTorappuCharacterDataUniqueEquipPair):
        if clzTorappuCharacterDataUniqueEquipPair is None:
            return
        self.key = clzTorappuCharacterDataUniqueEquipPair.Key()
        self.level = clzTorappuCharacterDataUniqueEquipPair.Level()

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        clz_Torappu_CharacterData_UniqueEquipPairStart(builder)
        if self.key is not None:
            clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key)
        clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, self.level)
        clzTorappuCharacterDataUniqueEquipPair = clz_Torappu_CharacterData_UniqueEquipPairEnd(builder)
        return clzTorappuCharacterDataUniqueEquipPair
