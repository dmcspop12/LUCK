# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_RouteData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData
    def MotionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData
    def StartPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def EndPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_GridPosition import clz_Torappu_GridPosition
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnRandomRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_UnityEngine_Vector2 import clz_UnityEngine_Vector2
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_UnityEngine_Vector2 import clz_UnityEngine_Vector2
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def Checkpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_RouteData_CheckpointData import clz_Torappu_RouteData_CheckpointData
            obj = clz_Torappu_RouteData_CheckpointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def CheckpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RouteData
    def CheckpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RouteData
    def AllowDiagonalMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryTileCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryNodeCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryCheckPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RouteDataStart(builder):
    builder.StartObject(10)

def Start(builder):
    clz_Torappu_RouteDataStart(builder)

def clz_Torappu_RouteDataAddMotionMode(builder, motionMode):
    builder.PrependInt32Slot(0, motionMode, 0)

def AddMotionMode(builder, motionMode):
    clz_Torappu_RouteDataAddMotionMode(builder, motionMode)

def clz_Torappu_RouteDataAddStartPosition(builder, startPosition):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(startPosition), 0)

def AddStartPosition(builder, startPosition):
    clz_Torappu_RouteDataAddStartPosition(builder, startPosition)

def clz_Torappu_RouteDataAddEndPosition(builder, endPosition):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endPosition), 0)

def AddEndPosition(builder, endPosition):
    clz_Torappu_RouteDataAddEndPosition(builder, endPosition)

def clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spawnRandomRange), 0)

def AddSpawnRandomRange(builder, spawnRandomRange):
    clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange)

def clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spawnOffset), 0)

def AddSpawnOffset(builder, spawnOffset):
    clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset)

def clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(checkpoints), 0)

def AddCheckpoints(builder, checkpoints):
    clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints)

def clz_Torappu_RouteDataStartCheckpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCheckpointsVector(builder, numElems):
    return clz_Torappu_RouteDataStartCheckpointsVector(builder, numElems)

def clz_Torappu_RouteDataAddAllowDiagonalMove(builder, allowDiagonalMove):
    builder.PrependBoolSlot(6, allowDiagonalMove, 0)

def AddAllowDiagonalMove(builder, allowDiagonalMove):
    clz_Torappu_RouteDataAddAllowDiagonalMove(builder, allowDiagonalMove)

def clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, visitEveryTileCenter):
    builder.PrependBoolSlot(7, visitEveryTileCenter, 0)

def AddVisitEveryTileCenter(builder, visitEveryTileCenter):
    clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, visitEveryTileCenter)

def clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, visitEveryNodeCenter):
    builder.PrependBoolSlot(8, visitEveryNodeCenter, 0)

def AddVisitEveryNodeCenter(builder, visitEveryNodeCenter):
    clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, visitEveryNodeCenter)

def clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, visitEveryCheckPoint):
    builder.PrependBoolSlot(9, visitEveryCheckPoint, 0)

def AddVisitEveryCheckPoint(builder, visitEveryCheckPoint):
    clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, visitEveryCheckPoint)

def clz_Torappu_RouteDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_RouteDataEnd(builder)

import clz_Torappu_GridPosition
import clz_Torappu_RouteData_CheckpointData
import clz_UnityEngine_Vector2
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_RouteDataT(object):

    # clz_Torappu_RouteDataT
    def __init__(self):
        self.motionMode = 0  # type: int
        self.startPosition = None  # type: Optional[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.endPosition = None  # type: Optional[clz_Torappu_GridPosition.clz_Torappu_GridPositionT]
        self.spawnRandomRange = None  # type: Optional[clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T]
        self.spawnOffset = None  # type: Optional[clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T]
        self.checkpoints = None  # type: List[clz_Torappu_RouteData_CheckpointData.clz_Torappu_RouteData_CheckpointDataT]
        self.allowDiagonalMove = False  # type: bool
        self.visitEveryTileCenter = False  # type: bool
        self.visitEveryNodeCenter = False  # type: bool
        self.visitEveryCheckPoint = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuRouteData = clz_Torappu_RouteData()
        clzTorappuRouteData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuRouteData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuRouteData):
        x = clz_Torappu_RouteDataT()
        x._UnPack(clzTorappuRouteData)
        return x

    # clz_Torappu_RouteDataT
    def _UnPack(self, clzTorappuRouteData):
        if clzTorappuRouteData is None:
            return
        self.motionMode = clzTorappuRouteData.MotionMode()
        if clzTorappuRouteData.StartPosition() is not None:
            self.startPosition = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteData.StartPosition())
        if clzTorappuRouteData.EndPosition() is not None:
            self.endPosition = clz_Torappu_GridPosition.clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteData.EndPosition())
        if clzTorappuRouteData.SpawnRandomRange() is not None:
            self.spawnRandomRange = clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteData.SpawnRandomRange())
        if clzTorappuRouteData.SpawnOffset() is not None:
            self.spawnOffset = clz_UnityEngine_Vector2.clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteData.SpawnOffset())
        if not clzTorappuRouteData.CheckpointsIsNone():
            self.checkpoints = []
            for i in range(clzTorappuRouteData.CheckpointsLength()):
                if clzTorappuRouteData.Checkpoints(i) is None:
                    self.checkpoints.append(None)
                else:
                    clz_Torappu_RouteData_CheckpointData_ = clz_Torappu_RouteData_CheckpointData.clz_Torappu_RouteData_CheckpointDataT.InitFromObj(clzTorappuRouteData.Checkpoints(i))
                    self.checkpoints.append(clz_Torappu_RouteData_CheckpointData_)
        self.allowDiagonalMove = clzTorappuRouteData.AllowDiagonalMove()
        self.visitEveryTileCenter = clzTorappuRouteData.VisitEveryTileCenter()
        self.visitEveryNodeCenter = clzTorappuRouteData.VisitEveryNodeCenter()
        self.visitEveryCheckPoint = clzTorappuRouteData.VisitEveryCheckPoint()

    # clz_Torappu_RouteDataT
    def Pack(self, builder):
        if self.startPosition is not None:
            startPosition = self.startPosition.Pack(builder)
        if self.endPosition is not None:
            endPosition = self.endPosition.Pack(builder)
        if self.spawnRandomRange is not None:
            spawnRandomRange = self.spawnRandomRange.Pack(builder)
        if self.spawnOffset is not None:
            spawnOffset = self.spawnOffset.Pack(builder)
        if self.checkpoints is not None:
            checkpointslist = []
            for i in range(len(self.checkpoints)):
                checkpointslist.append(self.checkpoints[i].Pack(builder))
            clz_Torappu_RouteDataStartCheckpointsVector(builder, len(self.checkpoints))
            for i in reversed(range(len(self.checkpoints))):
                builder.PrependUOffsetTRelative(checkpointslist[i])
            checkpoints = builder.EndVector()
        clz_Torappu_RouteDataStart(builder)
        clz_Torappu_RouteDataAddMotionMode(builder, self.motionMode)
        if self.startPosition is not None:
            clz_Torappu_RouteDataAddStartPosition(builder, startPosition)
        if self.endPosition is not None:
            clz_Torappu_RouteDataAddEndPosition(builder, endPosition)
        if self.spawnRandomRange is not None:
            clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange)
        if self.spawnOffset is not None:
            clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset)
        if self.checkpoints is not None:
            clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints)
        clz_Torappu_RouteDataAddAllowDiagonalMove(builder, self.allowDiagonalMove)
        clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, self.visitEveryTileCenter)
        clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, self.visitEveryNodeCenter)
        clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, self.visitEveryCheckPoint)
        clzTorappuRouteData = clz_Torappu_RouteDataEnd(builder)
        return clzTorappuRouteData
