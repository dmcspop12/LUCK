# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_PredefinedData_PredefinedCard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_CharacterData_UniqueEquipPair import clz_Torappu_CharacterData_UniqueEquipPair
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def ShowSpIllust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_CharacterData_MasterInfo import clz_Torappu_CharacterData_MasterInfo
            obj = clz_Torappu_CharacterData_MasterInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from clz_Torappu_CharacterInst_Metadata import clz_Torappu_CharacterInst_Metadata
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from clz_Torappu_Blackboard_DataPair import clz_Torappu_Blackboard_DataPair
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder):
    builder.StartObject(11)

def Start(builder):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, hidden):
    builder.PrependBoolSlot(0, hidden, 0)

def AddHidden(builder, hidden):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, hidden)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def AddAlias(builder, alias):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def AddUniEquipIds(builder, uniEquipIds):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartUniEquipIdsVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddShowSpIllust(builder, showSpIllust):
    builder.PrependBoolSlot(3, showSpIllust, 0)

def AddShowSpIllust(builder, showSpIllust):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddShowSpIllust(builder, showSpIllust)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMasterInfos(builder, masterInfos):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(masterInfos), 0)

def AddMasterInfos(builder, masterInfos):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMasterInfos(builder, masterInfos)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartMasterInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMasterInfosVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCardStartMasterInfosVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def AddInst(builder, inst):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(6, skillIndex, 0)

def AddSkillIndex(builder, skillIndex):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, skillIndex)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(7, mainSkillLvl, 0)

def AddMainSkillLvl(builder, mainSkillLvl):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, mainSkillLvl)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def AddSkinId(builder, skinId):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def AddTmplId(builder, tmplId):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def AddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOverrideSkillBlackboardVector(builder, numElems):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, numElems)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder)

import clz_Torappu_Blackboard_DataPair
import clz_Torappu_CharacterData_MasterInfo
import clz_Torappu_CharacterData_UniqueEquipPair
import clz_Torappu_CharacterInst_Metadata
try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_PredefinedData_PredefinedCardT(object):

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def __init__(self):
        self.hidden = False  # type: bool
        self.alias = None  # type: str
        self.uniEquipIds = None  # type: List[clz_Torappu_CharacterData_UniqueEquipPair.clz_Torappu_CharacterData_UniqueEquipPairT]
        self.showSpIllust = False  # type: bool
        self.masterInfos = None  # type: List[clz_Torappu_CharacterData_MasterInfo.clz_Torappu_CharacterData_MasterInfoT]
        self.inst = None  # type: Optional[clz_Torappu_CharacterInst_Metadata.clz_Torappu_CharacterInst_MetadataT]
        self.skillIndex = 0  # type: int
        self.mainSkillLvl = 0  # type: int
        self.skinId = None  # type: str
        self.tmplId = None  # type: str
        self.overrideSkillBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedDataPredefinedCard = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
        clzTorappuLevelDataPredefinedDataPredefinedCard.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedDataPredefinedCard):
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCardT()
        x._UnPack(clzTorappuLevelDataPredefinedDataPredefinedCard)
        return x

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def _UnPack(self, clzTorappuLevelDataPredefinedDataPredefinedCard):
        if clzTorappuLevelDataPredefinedDataPredefinedCard is None:
            return
        self.hidden = clzTorappuLevelDataPredefinedDataPredefinedCard.Hidden()
        self.alias = clzTorappuLevelDataPredefinedDataPredefinedCard.Alias()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIdsIsNone():
            self.uniEquipIds = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIdsLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIds(i) is None:
                    self.uniEquipIds.append(None)
                else:
                    clz_Torappu_CharacterData_UniqueEquipPair_ = clz_Torappu_CharacterData_UniqueEquipPair.clz_Torappu_CharacterData_UniqueEquipPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIds(i))
                    self.uniEquipIds.append(clz_Torappu_CharacterData_UniqueEquipPair_)
        self.showSpIllust = clzTorappuLevelDataPredefinedDataPredefinedCard.ShowSpIllust()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfosIsNone():
            self.masterInfos = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfosLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfos(i) is None:
                    self.masterInfos.append(None)
                else:
                    clz_Torappu_CharacterData_MasterInfo_ = clz_Torappu_CharacterData_MasterInfo.clz_Torappu_CharacterData_MasterInfoT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfos(i))
                    self.masterInfos.append(clz_Torappu_CharacterData_MasterInfo_)
        if clzTorappuLevelDataPredefinedDataPredefinedCard.Inst() is not None:
            self.inst = clz_Torappu_CharacterInst_Metadata.clz_Torappu_CharacterInst_MetadataT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.Inst())
        self.skillIndex = clzTorappuLevelDataPredefinedDataPredefinedCard.SkillIndex()
        self.mainSkillLvl = clzTorappuLevelDataPredefinedDataPredefinedCard.MainSkillLvl()
        self.skinId = clzTorappuLevelDataPredefinedDataPredefinedCard.SkinId()
        self.tmplId = clzTorappuLevelDataPredefinedDataPredefinedCard.TmplId()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboardIsNone():
            self.overrideSkillBlackboard = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboardLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboard(i) is None:
                    self.overrideSkillBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPair.clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboard(i))
                    self.overrideSkillBlackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def Pack(self, builder):
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.uniEquipIds is not None:
            uniEquipIdslist = []
            for i in range(len(self.uniEquipIds)):
                uniEquipIdslist.append(self.uniEquipIds[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, len(self.uniEquipIds))
            for i in reversed(range(len(self.uniEquipIds))):
                builder.PrependUOffsetTRelative(uniEquipIdslist[i])
            uniEquipIds = builder.EndVector()
        if self.masterInfos is not None:
            masterInfoslist = []
            for i in range(len(self.masterInfos)):
                masterInfoslist.append(self.masterInfos[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartMasterInfosVector(builder, len(self.masterInfos))
            for i in reversed(range(len(self.masterInfos))):
                builder.PrependUOffsetTRelative(masterInfoslist[i])
            masterInfos = builder.EndVector()
        if self.inst is not None:
            inst = self.inst.Pack(builder)
        if self.skinId is not None:
            skinId = builder.CreateString(self.skinId)
        if self.tmplId is not None:
            tmplId = builder.CreateString(self.tmplId)
        if self.overrideSkillBlackboard is not None:
            overrideSkillBlackboardlist = []
            for i in range(len(self.overrideSkillBlackboard)):
                overrideSkillBlackboardlist.append(self.overrideSkillBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, len(self.overrideSkillBlackboard))
            for i in reversed(range(len(self.overrideSkillBlackboard))):
                builder.PrependUOffsetTRelative(overrideSkillBlackboardlist[i])
            overrideSkillBlackboard = builder.EndVector()
        clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, self.hidden)
        if self.alias is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias)
        if self.uniEquipIds is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddShowSpIllust(builder, self.showSpIllust)
        if self.masterInfos is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMasterInfos(builder, masterInfos)
        if self.inst is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, self.skillIndex)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, self.mainSkillLvl)
        if self.skinId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId)
        if self.tmplId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId)
        if self.overrideSkillBlackboard is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)
        clzTorappuLevelDataPredefinedDataPredefinedCard = clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder)
        return clzTorappuLevelDataPredefinedDataPredefinedCard
