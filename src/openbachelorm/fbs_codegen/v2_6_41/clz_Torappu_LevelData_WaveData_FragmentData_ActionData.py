# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class clz_Torappu_LevelData_WaveData_FragmentData_ActionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData_ActionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ActionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ManagedByScheduler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RouteIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def BlockFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoPreviewRoute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoDisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def IsUnharmfulAndAlwaysCountAsKilled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def HiddenGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupPackKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RefreshType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def DontBlockWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ForceBlockWaveInBranch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder):
    builder.StartObject(19)

def Start(builder):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, actionType):
    builder.PrependInt32Slot(0, actionType, 0)

def AddActionType(builder, actionType):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, actionType)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, managedByScheduler):
    builder.PrependBoolSlot(1, managedByScheduler, 0)

def AddManagedByScheduler(builder, managedByScheduler):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, managedByScheduler)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def AddKey(builder, key):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def AddCount(builder, count):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, count)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(4, preDelay, 0.0)

def AddPreDelay(builder, preDelay):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, preDelay)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, interval):
    builder.PrependFloat32Slot(5, interval, 0.0)

def AddInterval(builder, interval):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, interval)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, routeIndex):
    builder.PrependInt32Slot(6, routeIndex, 0)

def AddRouteIndex(builder, routeIndex):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, routeIndex)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, blockFragment):
    builder.PrependBoolSlot(7, blockFragment, 0)

def AddBlockFragment(builder, blockFragment):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, blockFragment)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, autoPreviewRoute):
    builder.PrependBoolSlot(8, autoPreviewRoute, 0)

def AddAutoPreviewRoute(builder, autoPreviewRoute):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, autoPreviewRoute)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo):
    builder.PrependBoolSlot(9, autoDisplayEnemyInfo, 0)

def AddAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled):
    builder.PrependBoolSlot(10, isUnharmfulAndAlwaysCountAsKilled, 0)

def AddIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenGroup), 0)

def AddHiddenGroup(builder, hiddenGroup):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupKey), 0)

def AddRandomSpawnGroupKey(builder, randomSpawnGroupKey):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupPackKey), 0)

def AddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, randomType):
    builder.PrependInt32Slot(14, randomType, 0)

def AddRandomType(builder, randomType):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, randomType)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, refreshType):
    builder.PrependInt32Slot(15, refreshType, 0)

def AddRefreshType(builder, refreshType):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, refreshType)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, weight):
    builder.PrependInt32Slot(16, weight, 0)

def AddWeight(builder, weight):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, weight)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, dontBlockWave):
    builder.PrependBoolSlot(17, dontBlockWave, 0)

def AddDontBlockWave(builder, dontBlockWave):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, dontBlockWave)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddForceBlockWaveInBranch(builder, forceBlockWaveInBranch):
    builder.PrependBoolSlot(18, forceBlockWaveInBranch, 0)

def AddForceBlockWaveInBranch(builder, forceBlockWaveInBranch):
    clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddForceBlockWaveInBranch(builder, forceBlockWaveInBranch)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder)


class clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT(object):

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def __init__(self):
        self.actionType = 0  # type: int
        self.managedByScheduler = False  # type: bool
        self.key = None  # type: str
        self.count = 0  # type: int
        self.preDelay = 0.0  # type: float
        self.interval = 0.0  # type: float
        self.routeIndex = 0  # type: int
        self.blockFragment = False  # type: bool
        self.autoPreviewRoute = False  # type: bool
        self.autoDisplayEnemyInfo = False  # type: bool
        self.isUnharmfulAndAlwaysCountAsKilled = False  # type: bool
        self.hiddenGroup = None  # type: str
        self.randomSpawnGroupKey = None  # type: str
        self.randomSpawnGroupPackKey = None  # type: str
        self.randomType = 0  # type: int
        self.refreshType = 0  # type: int
        self.weight = 0  # type: int
        self.dontBlockWave = False  # type: bool
        self.forceBlockWaveInBranch = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveDataFragmentDataActionData = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        clzTorappuLevelDataWaveDataFragmentDataActionData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveDataFragmentDataActionData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveDataFragmentDataActionData):
        x = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT()
        x._UnPack(clzTorappuLevelDataWaveDataFragmentDataActionData)
        return x

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def _UnPack(self, clzTorappuLevelDataWaveDataFragmentDataActionData):
        if clzTorappuLevelDataWaveDataFragmentDataActionData is None:
            return
        self.actionType = clzTorappuLevelDataWaveDataFragmentDataActionData.ActionType()
        self.managedByScheduler = clzTorappuLevelDataWaveDataFragmentDataActionData.ManagedByScheduler()
        self.key = clzTorappuLevelDataWaveDataFragmentDataActionData.Key()
        self.count = clzTorappuLevelDataWaveDataFragmentDataActionData.Count()
        self.preDelay = clzTorappuLevelDataWaveDataFragmentDataActionData.PreDelay()
        self.interval = clzTorappuLevelDataWaveDataFragmentDataActionData.Interval()
        self.routeIndex = clzTorappuLevelDataWaveDataFragmentDataActionData.RouteIndex()
        self.blockFragment = clzTorappuLevelDataWaveDataFragmentDataActionData.BlockFragment()
        self.autoPreviewRoute = clzTorappuLevelDataWaveDataFragmentDataActionData.AutoPreviewRoute()
        self.autoDisplayEnemyInfo = clzTorappuLevelDataWaveDataFragmentDataActionData.AutoDisplayEnemyInfo()
        self.isUnharmfulAndAlwaysCountAsKilled = clzTorappuLevelDataWaveDataFragmentDataActionData.IsUnharmfulAndAlwaysCountAsKilled()
        self.hiddenGroup = clzTorappuLevelDataWaveDataFragmentDataActionData.HiddenGroup()
        self.randomSpawnGroupKey = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomSpawnGroupKey()
        self.randomSpawnGroupPackKey = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomSpawnGroupPackKey()
        self.randomType = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomType()
        self.refreshType = clzTorappuLevelDataWaveDataFragmentDataActionData.RefreshType()
        self.weight = clzTorappuLevelDataWaveDataFragmentDataActionData.Weight()
        self.dontBlockWave = clzTorappuLevelDataWaveDataFragmentDataActionData.DontBlockWave()
        self.forceBlockWaveInBranch = clzTorappuLevelDataWaveDataFragmentDataActionData.ForceBlockWaveInBranch()

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.hiddenGroup is not None:
            hiddenGroup = builder.CreateString(self.hiddenGroup)
        if self.randomSpawnGroupKey is not None:
            randomSpawnGroupKey = builder.CreateString(self.randomSpawnGroupKey)
        if self.randomSpawnGroupPackKey is not None:
            randomSpawnGroupPackKey = builder.CreateString(self.randomSpawnGroupPackKey)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, self.actionType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, self.managedByScheduler)
        if self.key is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, self.count)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, self.preDelay)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, self.interval)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, self.routeIndex)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, self.blockFragment)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, self.autoPreviewRoute)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, self.autoDisplayEnemyInfo)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, self.isUnharmfulAndAlwaysCountAsKilled)
        if self.hiddenGroup is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup)
        if self.randomSpawnGroupKey is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey)
        if self.randomSpawnGroupPackKey is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, self.randomType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, self.refreshType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, self.weight)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, self.dontBlockWave)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddForceBlockWaveInBranch(builder, self.forceBlockWaveInBranch)
        clzTorappuLevelDataWaveDataFragmentDataActionData = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder)
        return clzTorappuLevelDataWaveDataFragmentDataActionData
